<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JS基礎之作用域（lexical scope）</title>
      <link href="2020/10/25/JS%E5%9F%BA%E7%A4%8E%E4%B9%8B%E4%BD%9C%E7%94%A8%E5%9F%9F%EF%BC%88lexical-scope%EF%BC%89/"/>
      <url>2020/10/25/JS%E5%9F%BA%E7%A4%8E%E4%B9%8B%E4%BD%9C%E7%94%A8%E5%9F%9F%EF%BC%88lexical-scope%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>原文鏈接：<a href="https://blog.techbridge.cc/2018/12/08/javascript-closure/">所有的函式都是閉包：談 JS 中的作用域與 Closure</a></p><p>這篇文章講得太好了，感覺自己重新吸收再寫一篇反而是浪費時間，就直接貼過來。</p><h2 id="作用域（Scope）"><a href="#作用域（Scope）" class="headerlink" title="作用域（Scope）"></a>作用域（Scope）</h2><p>什麼是作用域（或也有人翻做：範疇）？</p><p>我自己最喜歡的解釋是：「作用域就是一個變數的生存範圍，一旦出了這個範圍，就無法存取到這個變數」。</p><p>來看一個簡單的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// Uncaught ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure><p>在 ES6 以前，唯一產生作用域的方法就是 function，每一個 function 都有自己的作用域，在作用域外面你就存取不到這個 function 內部所定義的變數。然而 ES6 的時候引入了 let 跟 const，多了 block 的作用域，但那不是本文的重點所在，所以我就先這樣帶過了。</p><p>除了這種 function 的作用域以外，還有一種叫做作用域是 global 的，其實就是我們常在說的「全域」，或者是「全域變數」，任何地方都能夠存取到，如下範例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> I_am_global = <span class="number">123</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(I_am_global) <span class="comment">// 123</span></span><br><span class="line">&#125;</span><br><span class="line">test()</span><br></pre></td></tr></table></figure><p>從上面的範例中你可以發現一件有趣的事情，那就是你在 function 裡面可以存取外面的變數，可是你從外面卻進不去 function 裡面，這邊我要引用之前看到的一個<a href="https://ithelp.ithome.com.tw/articles/10203387">很有趣的解釋方法</a>，這篇文章把作用域比喻成明星，把函式比喻成地區。</p><p>全域變數就是國際巨星，例如說湯姆克魯斯，無論到哪裡大家都認識這個人，因為實在是太紅了。而 function 裡面的變數就像是你那個很會唱歌的鄰居，整個社區都知道它的存在，但一但出了這個社區（超過了這個 function），就沒人認識他是誰。</p><p>所以 function 一層層的結構就像是地區那樣，最外層是地球、再來五大洲、亞洲、臺灣、台北市、大安區、大安森林公園，在大安森林公園運動的人知道那邊常在慢跑的朋友，也知道台北市內的名人，可是居住在台北市的人卻不一定知道大安區的區長是誰，因為那超出了它的範圍。</p><p>把上面的說法轉成程式碼就會變成這樣：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">taiwan</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> taiwan_star = <span class="string">&#x27;taiwan_star&#x27;</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">taipei</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">daan</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> daan_star = <span class="string">&#x27;daan_star&#x27;</span></span><br><span class="line">      <span class="built_in">console</span>.log(taiwan_star) <span class="comment">// taiwan_star</span></span><br><span class="line">    &#125;</span><br><span class="line">    daan()</span><br><span class="line">    <span class="built_in">console</span>.log(daan_star) <span class="comment">// Uncaught ReferenceError: daan_star is not defined</span></span><br><span class="line">  &#125;</span><br><span class="line">  taipei()</span><br><span class="line">&#125;</span><br><span class="line">taiwan()</span><br></pre></td></tr></table></figure><p>所以你現在對作用域這個詞應該比較能夠理解了，就是一個變數的生存範圍，一但超過那個範圍就存取不到，而這個範圍就是 function 本身及其內部，所以你在 function 裡面宣告了一個變數，function 外是沒辦法存取的。</p><p>外面存取不到裡面的，但「內層」可以存取到「外層」的東西：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">100</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a) <span class="comment">// 100</span></span><br><span class="line">  &#125;</span><br><span class="line">  inner()</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br></pre></td></tr></table></figure><p>對於<code>inner</code>這個 function 來說，<code>a</code>並不是它自己的變數，而這種不在自己作用域中，也不是被當成參數傳進來的變數，就可以稱作 free variable，可以翻做自由變數（聽起來滿酷的）。</p><p>對 inner 來說，a 就是一個自由變數。</p><p>那 a 的值會是什麼？</p><p>因為在 inner 這個作用域裡面找不到 a，就會去上一層 test 的作用域裡面尋找，如果還是找不到，就會再往上一層直到找到為止，所以你可以發現這樣會構成一個「作用域鏈」，inner function scope -&gt; test function scope -&gt; global scope，不斷在這條鏈往上找，如果最後還是找不到就拋出錯誤。</p><p>講到這邊基本的概念應該都有了，再來我要出一個問題把你的認知重新打亂並混淆你：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a) <span class="comment">// 100 or 200?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">200</span></span><br><span class="line">  echo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test()</span><br></pre></td></tr></table></figure><p>請問最後 log 出來的 a 應該會是 100 還是 200？</p><p>我知道！是 100，因為全域變數裡面的 a 是 100…等等，可是我在 test 裡面的時候又宣告了一個叫 a 的變數並設為 200，echo 裡面的這個 a 好像也可能是 200…好混亂。</p><p>答案是 100，你只要掌握我們之前說的那些原則就行了，echo 裡面的那個 a 就是 global 的那個 a，跟 test 裡面的 a 一點關係都沒有。</p><p>但你會被混淆也是非常合理的事情，因為在某些程式語言裡面，a 的確會是 200 喔！a 最後出來的值（或換句話說，如何決定自由變數的值）跟程式語言如何決定「作用域」這件事情有關係。</p><p>其實我們一開始介紹的這種方法，叫做靜態作用域（static scope），為什麼叫做靜態？就代表作用域跟這個 function 在哪裡被「呼叫」一點關係都沒有，你用肉眼看程式碼的結構就可以看出來它的作用域是什麼，而且是不會變的。</p><p>舉例來說，上面那個範例印出來的 a 就會是 global 的 a，儘管我在 test 裡面宣告了另外一個 a 並且呼叫 echo 這個 function，但這跟作用域一點關係都沒有，靜態作用域是在 function 被「宣告」的時候就決定了，而不是 function 被「執行」的時候。</p><p>相對地，有靜態作用域就有動態作用域（dynamic scope），如果這個程式語言是採用動態作用域，那最後 log 出來的值就會是 200 而不是 100；換句話說，echo 這個 function 裡面的 a 的值是在程式執行時期才被動態決定的，你只看程式碼的結構沒辦法決定 a 到底是什麼值。</p><p>而 JavaScript 的作用域是採用前者，靜態作用域，所以你分析程式碼的結構就可以知道作用域的長相。這邊順帶一提的是 JavaScript 裡面最難解的問題之一：<code>this</code>，其實原理跟動態作用域有異曲同工之妙，那就是 this 的值也是程式執行時才被動態決定的，這也是為什麼一大堆人會搞不清楚它的值是什麼，因為會變來變去的。</p><p>靜態作用域其實更學術的名詞叫做 lexical scope，我有看過有人翻成語彙範疇，有人則是翻成詞法作用域。</p><p>要理解什麼是 lexical，你必須先知道一點 compiler 的運作原理。在編譯的時候有幾個步驟是用程式去 parse 你的程式碼並且解析，而其中一個步驟就叫做 Lexical Analysis（詞法分析或語彙分析），其實就是去正確分析出程式碼裡面的每一個詞。</p><p>我舉一個例子好了，例如說 <code>a = 13 + 2</code>這一個句子，經過詞法分析之後可能就會變成：<code>a</code>、<code>=</code>、<code>13</code>、<code>+</code>、<code>2</code>，這樣子的分組，就先理解到這邊就好，想知道更多編譯器的細節請自行參考相關書籍或文章，或等我有一天把這個基礎補足之後再來用白話文跟大家分享。</p><p>所以會叫做 lexical scope 的原因就是在編譯的時候其實就能決定作用域是什麼，才有了這樣子的一個名稱。</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS基礎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爲何不用var而要用let和const？</title>
      <link href="2020/10/22/%E7%88%B2%E4%BD%95%E4%B8%8D%E7%94%A8var%E8%80%8C%E8%A6%81%E7%94%A8let%E5%92%8Cconst%EF%BC%9F/"/>
      <url>2020/10/22/%E7%88%B2%E4%BD%95%E4%B8%8D%E7%94%A8var%E8%80%8C%E8%A6%81%E7%94%A8let%E5%92%8Cconst%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="var關鍵字"><a href="#var關鍵字" class="headerlink" title="var關鍵字"></a><code>var</code>關鍵字</h2><p><code>var</code>關鍵字從JavaScript誕生以來就存在了，當初設計JavaScript只是想提供一個簡單的脚本語言，用來控制瀏覽器行爲，誰也沒想到會發展到今天如此强大，而用來聲明變量的關鍵字<code>var</code>顯然也並不成熟，存在著一些問題。</p><h3 id="var的作用域——function-scope"><a href="#var的作用域——function-scope" class="headerlink" title="var的作用域——function scope"></a><code>var</code>的作用域——function scope</h3><p><code>var</code>的作用域是<strong>function scope</strong>，意思是這是一個「函數級作用域」，在函數内都可以訪問。</p><p>用文字說可能不清楚，結合例子看一下就簡單了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例<span class="number">1.</span> 在函數體之外無法獲取</span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">// error, &quot;a&quot; is not defined</span></span><br></pre></td></tr></table></figure><p>從例1可以看到，函數體内聲明的變量<code>a</code>在函數體外是不能被獲取的，看起來似乎沒什麽問題。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">例<span class="number">2.</span> 在函數體之内都可使用，而非塊級作用域（block scope）</span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(a);  <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line">f();</span><br></pre></td></tr></table></figure><p>繼續看例2，在<code>f</code>函數中的<code>if</code>語句塊中，定義一個變量<code>a</code>，結果在整個函數體之内都可以使用，這就是function scope的含義，它和塊級作用域（block scope）是不同的。</p><p>塊級作用域的變量應該只在<code>&#123;&#125;</code>之間才存在，超過<code>&#123;&#125;</code>即被銷毀，但<code>var</code>關鍵字聲明的變量卻在整個函數體内都存在。如果函數體内包含很多不同的判斷條件，每個判斷條件執行不同的語句塊，原本不同區塊的局域變量現在都能互相引用，這就是function scope的變量容易帶來的問題。</p><h3 id="var的另一個問題——變量提升（hoisting）"><a href="#var的另一個問題——變量提升（hoisting）" class="headerlink" title="var的另一個問題——變量提升（hoisting）"></a><code>var</code>的另一個問題——變量提升（hoisting）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);  <span class="comment">// undefined</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">f();</span><br></pre></td></tr></table></figure><p>一般來説，如果執行上面的代碼，應該要報錯<code>&quot;error, a is not defined&quot;</code>。但是實際執行卻打印出<code>undefined</code>，這代表存在變量<code>a</code>，但還未賦值給它。這就是<strong>變量提升</strong>問題。</p><p>具體來説，使用<code>var</code>關鍵字聲明變量時，會自動把變量提升到作用域頂部。實際代碼執行如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a;  <span class="comment">// 變量提升 hoisting</span></span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">f();</span><br></pre></td></tr></table></figure><h4 id="可以出這樣一道面試題：問函數的結果是什麽？"><a href="#可以出這樣一道面試題：問函數的結果是什麽？" class="headerlink" title="可以出這樣一道面試題：問函數的結果是什麽？"></a>可以出這樣一道面試題：問函數的結果是什麽？</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">f();</span><br></pre></td></tr></table></figure><p>答案就是<code>undefined</code>，原因是<code>var</code>聲明的變量是function scope，且存在變量提升。</p><h4 id="關於變量提升的補充"><a href="#關於變量提升的補充" class="headerlink" title="關於變量提升的補充"></a>關於變量提升的補充</h4><h5 id="函數有傳入參數時"><a href="#函數有傳入參數時" class="headerlink" title="函數有傳入參數時"></a>函數有傳入參數時</h5><p>如果出現下面這種情況，會輸出什麽？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v);</span><br><span class="line">    <span class="keyword">var</span> v= <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>你可能會試著進行這樣的變換</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> v;</span><br><span class="line">    <span class="built_in">console</span>.log(v);</span><br><span class="line">    v = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>答案是<code>undefined</code>！不難嘛！</p><p>但是答案其實是<code>10</code>，而不是<code>undefined</code>。</p><p>這是爲什麽呢？其實變換的過程沒有錯，只不過沒有考慮傳入的參數，我們補充後應該是這樣：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> v = <span class="number">10</span>;  <span class="comment">// 由於下面呼叫test(10)</span></span><br><span class="line">    <span class="keyword">var</span> v;</span><br><span class="line">    <span class="built_in">console</span>.log(v);</span><br><span class="line">    v = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>看到這，或許你會想「就算是這樣，在<code>console.log</code>以前，我們重新聲明了一次<code>v</code>，那<code>v</code>不是應該被覆蓋為<code>undefined</code>嗎？」</p><p>爲了理解這個問題，再來看一個例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> v;</span><br><span class="line"><span class="built_in">console</span>.log(v);</span><br></pre></td></tr></table></figure><p>答案是<code>5</code>而不是<code>undefined</code>，這是因爲存在變量提升，所以語句被分成了兩部分——聲明和賦值。上面的代碼其實可以看作是這樣：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v;</span><br><span class="line"><span class="keyword">var</span> v;</span><br><span class="line">v = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(v);</span><br></pre></td></tr></table></figure><p>這樣就清楚多了，答案顯然是<code>5</code>。</p><h5 id="函數聲明的提升"><a href="#函數聲明的提升" class="headerlink" title="函數聲明的提升"></a>函數聲明的提升</h5><p>看最後一個例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>除了變量會提升外，函數聲明也會提升！而且優先級更高，因此上面的例子會輸出<code>function</code>而不是<code>undefined</code>。</p><blockquote><p>關於變量提升（hoisting），如果你還想要知道更多的細節，非常推薦看這篇文章，很清楚地講解了爲什麽我們需要變量提升？以及變量提升究竟是怎麽運作的？</p><p><a href="https://github.com/aszx87410/blog/issues/34">我知道你懂 hoisting，可是你了解到多深？</a></p></blockquote><h3 id="模仿塊級作用域"><a href="#模仿塊級作用域" class="headerlink" title="模仿塊級作用域"></a>模仿塊級作用域</h3><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>如果在for循環中使用 <code>var</code>，且不控制<code>i</code>的作用域的話，將會創建一個全局變量<code>i</code>，即在for循環結束後仍能訪問<code>i</code>。</p><p>如此一來，當有多位開發者共同參與開發時，會很容易遇到命名衝突的問題，所以我們應該盡量少往全局作用域添加變量和函數。解決方法之一就是模仿塊級作用域，使<code>var</code>聲明的變量的作用域得到控制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i);  <span class="comment">// 5, i成了全局變量，而我們不希望如此</span></span><br></pre></td></tr></table></figure><h4 id="怎麽做"><a href="#怎麽做" class="headerlink" title="怎麽做"></a>怎麽做</h4><p><strong>匿名函數可以用來模仿塊級作用域。</strong>語法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 這裡是塊級作用域</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><strong>解釋：</strong>因爲沒有指向匿名函數的引用，所以當函數執行完畢，就會立即銷毀其作用域鏈，從而模仿塊級作用域。</p><blockquote><p>注意： 因爲JavaScript把<code>function</code>關鍵字當作函數聲明的開始，而函數聲明後面不能跟圓括號<code>()</code>。然而，函數表達式後面可以跟圓括號。爲了把函數聲明轉換成函數表達式，要把函數聲明用<code>()</code>包裹起來。</p></blockquote><p>還是用上面的例子，這次用模仿塊級作用域，在for循環中使用<code>var</code>。這次並沒有向全局作用域添加變量<code>i</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();  <span class="comment">// 模仿塊級作用域</span></span><br><span class="line"><span class="built_in">console</span>.log(i);  <span class="comment">// Uncaught ReferenceError: i is not defined</span></span><br></pre></td></tr></table></figure><h2 id="let和const關鍵字"><a href="#let和const關鍵字" class="headerlink" title="let和const關鍵字"></a><code>let</code>和<code>const</code>關鍵字</h2><p>2015年通過的ES6標準，新增了<code>let</code>和<code>const</code>關鍵字，用來聲明變量和常量。解決了<code>var</code>之前存在的問題。</p><p>這兩個關鍵字</p><ul><li>都是<strong>塊級作用域</strong>（block scope），即變量的生命周期只會存在於<code>&#123;&#125;</code>之間（包括<code>if</code>和<code>for</code>的<code>&#123;&#125;</code>）</li><li>都<strong>不存在變量提升</strong>的問題。</li></ul><h3 id="let在for循環中的作用域"><a href="#let在for循環中的作用域" class="headerlink" title="let在for循環中的作用域"></a><code>let</code>在for循環中的作用域</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    a[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>]();  <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，for循環中的變量<code>i</code>是用<code>let</code>聲明的。要注意的是，當前的<code>i</code>只在本輪循環有效。這個意思就是每一次循環使用的<code>i</code>，其實都是一個新的變量，<code>a[i]</code>綁定的函數用閉包存儲著不同的<code>i</code>，所以最後<code>a[6]()</code>打印出的是<code>6</code>。如果<code>i</code>是用<code>var</code>聲明的，則每個函數的閉包綁定的都是同一個<code>i</code>，最終結果都是<code>10</code>。</p><p>for循環還有一個特別之處，就是設置循環變量的那部分是一個父作用域，而循環體内部是一個單獨的子作用域。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// abc</span></span><br><span class="line"><span class="comment">// abc</span></span><br><span class="line"><span class="comment">// abc</span></span><br></pre></td></tr></table></figure><p>上面的例子表明，函數内部的變量<code>i</code>與循環變量<code>i</code>不在同一個作用域，有各自單獨的作用域。</p><h3 id="const的其他注意細節"><a href="#const的其他注意細節" class="headerlink" title="const的其他注意細節"></a><code>const</code>的其他注意細節</h3><ol><li>聲明變量時必須初始化（因爲不能後續修改，無法再賦值）</li><li>聲明的變量不能修改（如果是引用類型的值，則不能修改引用的指針，但還是能夠修改屬性值）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name: <span class="string">&quot;Peter&quot;</span>,</span><br><span class="line">    age: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person.age = <span class="number">21</span>;  <span class="comment">// 允許修改屬性值</span></span><br><span class="line"><span class="built_in">console</span>.log(person.age);  <span class="comment">// 21</span></span><br><span class="line"></span><br><span class="line">person = &#123;</span><br><span class="line">    name: <span class="string">&quot;Peter&quot;</span>,</span><br><span class="line">    age: <span class="number">21</span></span><br><span class="line">&#125;;    <span class="comment">// 報錯，嘗試修改對象的指針</span></span><br></pre></td></tr></table></figure><h3 id="暫時性死區"><a href="#暫時性死區" class="headerlink" title="暫時性死區"></a>暫時性死區</h3><p>ES6明確規定，如果塊級作用域中存在<code>let</code>和<code>const</code>命令，它們所聲明的變量就「綁定」這個區域，不再受外部影響。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">tmp = <span class="number">1</span>;  <span class="comment">// ReferenceError</span></span><br><span class="line">  <span class="keyword">let</span> tmp;  <span class="comment">// 或者const tmp;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中，雖然有全局變量<code>tmp</code>，但在塊級作用域内<code>let</code>也聲明了一個局部變量<code>tmp</code>，這導致後者綁定這個塊級作用域，所以對這個塊級作用域來説，在聲明變量前就對變量賦值會報錯。這就稱爲「暫時性死區」（Temporal Dead Zone）。</p><h2 id="遵循好的傳統規範"><a href="#遵循好的傳統規範" class="headerlink" title="遵循好的傳統規範"></a>遵循好的傳統規範</h2><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@539922c1bea014bbc0000c3b20e13aa9d94c2761/2020/10/23/0448e4f37cf3117ec76ef2bb193cf694.png"></p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS基礎 ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>對JS中閉包（Closure）的理解</title>
      <link href="2020/10/22/%E5%B0%8DJS%E4%B8%AD%E9%96%89%E5%8C%85%EF%BC%88Closure%EF%BC%89%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>2020/10/22/%E5%B0%8DJS%E4%B8%AD%E9%96%89%E5%8C%85%EF%BC%88Closure%EF%BC%89%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JavaScript基礎對於前端來説是重要的武器，而閉包是需要攻剋的幾大難題之一。很多高級應用都要依靠閉包實現。</p><p>當然，新手對閉包的理解可能不會很深，因爲還沒有在實戰中應用過，比較難有深刻的體悟。</p><h2 id="什麽是閉包？"><a href="#什麽是閉包？" class="headerlink" title="什麽是閉包？"></a>什麽是閉包？</h2><p><strong>閉包</strong>是一種特殊的函數，是指有權訪問另一個函數作用域（function scope）中的變量的函數。</p><p>由於在JavaScript中，只有函數内部的子函數才能讀取到局部變量，因此也可以把閉包簡單理解成「定義在一個函數内部的函數」。</p><h2 id="爲什麽要用閉包？"><a href="#爲什麽要用閉包？" class="headerlink" title="爲什麽要用閉包？"></a>爲什麽要用閉包？</h2><p>凡事存在都有它的理由，那麽爲什麽JavaScript中要有閉包呢？如果説閉包的存在是爲了解決某一個問題，那是要解決什麽問題呢?</p><p>JavaScript多數時候屬於「函數式編程」（functional programming），這很方便，但是卻也容易帶來一些問題。比如在某一個作用域中定義一個函數，但是在另一個作用域中執行，這時候就可能導致函數定義中使用到的變量，在執行環境中並不存在。而閉包，就可以解決這類問題。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line">    f = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">f();  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>上面這個例子，在塊級作用域中，函數定義的時候用到了<code>i</code>，但執行時作用域中卻不存在<code>i</code>，結果仍能正確打印，這是爲什麽？</p><p>其實這就是一個類似閉包的情況（並不是閉包），閉包需要訪問另一個<strong>函數作用域</strong>中的變量，這個例子中函數只是訪問了另一個塊級作用域中的變量，不過兩者解決的問題是一樣的，都是在函數内部記錄了一個其他作用域的變量的引用，使得本應不存在的變量仍能被獲取到。</p><p>用<code>console.dir(f)</code>可以查看函數的詳細信息，可以看到函數<code>f</code>的作用域鏈的最前端，是一個塊級對象，裡面記錄了<code>i: 1</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@45a93c01a3a355cfa7bbb962458fd365600f0938/2020/10/25/e3df506c2a47568d9d18f601cad427e2.png"></p><p>下面來看一個真正的閉包，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> j = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這個例子中，<code>f</code>函數内部的匿名函數就是一個閉包，因爲它引用了另一個函數作用域（即<code>f</code>函數）的局部變量<code>i</code>。</p><p>用<code>console.dir(f())</code>查看匿名函數，可以看到匿名函數的作用域鏈，最前端是一個閉包，裡面記錄著<code>i: 1</code>，且局部變量<code>j</code>並沒有被記錄，這是因爲閉包沒有引用變量<code>j</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@9e881d89d294efad4ceb0af0c246828f184967f8/2020/10/25/7798d4072ccfe7d48ae41d1a18eef054.png"></p><h2 id="閉包的好處"><a href="#閉包的好處" class="headerlink" title="閉包的好處"></a>閉包的好處</h2><h3 id="1-隱藏變量，讓外部存取不到，增加安全性"><a href="#1-隱藏變量，讓外部存取不到，增加安全性" class="headerlink" title="1. 隱藏變量，讓外部存取不到，增加安全性"></a>1. 隱藏變量，讓外部存取不到，增加安全性</h3><p>例如，記錄餘額與扣款的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> my_balance = <span class="number">999</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deduct</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    my_balance -= (n &gt; <span class="number">10</span> ? <span class="number">10</span> : n);  <span class="comment">// 最多扣10塊</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">deduct(<span class="number">13</span>);  <span class="comment">// 只扣10塊</span></span><br><span class="line">my_balance -= <span class="number">999</span>;  <span class="comment">// 還是扣了999塊</span></span><br></pre></td></tr></table></figure><p>儘管可以利用<code>deduct</code>函數來扣款，控制最多扣10塊，但由於<code>my_balance</code>變量暴露在外，任何人都可以直接修改這個變量。但是如果利用閉包來寫，就不一樣了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getWallet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> my_balance = <span class="number">999</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        deduct: <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">             my_balance -= (n &gt; <span class="number">10</span> ? <span class="number">10</span> : n);  <span class="comment">// 最多扣10塊</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  <span class="comment">// return返回一個對象，裡面有deduct方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wallet = getWallet();</span><br><span class="line">wallet.deduct(<span class="number">13</span>);  <span class="comment">// 只扣10塊</span></span><br><span class="line">my_balance -= <span class="number">999</span>;  <span class="comment">// Uncaught ReferrenceError: my_balance is not defined</span></span><br></pre></td></tr></table></figure><p>利用閉包，我們把餘額藏在了function裡面，所以外部就不能隨意修改餘額了，要修改只能通過我們暴露出的<code>deduct</code>函數修改。這樣就達到了隱藏資訊的目的。</p><h3 id="2-讓變量的值始終保持在内存中"><a href="#2-讓變量的值始終保持在内存中" class="headerlink" title="2. 讓變量的值始終保持在内存中"></a>2. 讓變量的值始終保持在内存中</h3><p>還是用上一個例子，添加一個顯示餘額的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getWallet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> my_balance = <span class="number">999</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        deduct: <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">             my_balance -= (n &gt; <span class="number">10</span> ? <span class="number">10</span> : n);</span><br><span class="line">        &#125;,</span><br><span class="line">        showBalance: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(my_balance);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wallet = getWallet();</span><br><span class="line">wallet.deduct(<span class="number">13</span>);</span><br><span class="line">wallet.showBalance();  <span class="comment">// 989，因爲最多一次扣10塊</span></span><br></pre></td></tr></table></figure><p>通過這個例子，知道了閉包可以用來存取本應被釋放的值（因爲閉包的引用而無法被釋放）。</p><h2 id="閉包的壞處"><a href="#閉包的壞處" class="headerlink" title="閉包的壞處"></a>閉包的壞處</h2><h3 id="關於閉包中的this對象"><a href="#關於閉包中的this對象" class="headerlink" title="關於閉包中的this對象"></a>關於閉包中的<code>this</code>對象</h3><p>在閉包中使用<code>this</code>對象也可能會導致一些問題。我們知道，<code>this</code>對象是在函數執行時基於函數的執行環境綁定的。</p><p>不過，匿名函數的執行環境具有全局性，因此其<code>this</code>對象通常指向<code>window</code>。下面來看一個例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;The Window&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">    name: <span class="string">&quot;My Object&quot;</span>,</span><br><span class="line">    getNameFunc: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(object.getNameFunc()());  <span class="comment">// &quot;The Window&quot;</span></span><br></pre></td></tr></table></figure><p>由於<code>object.getNameFunc()</code>返回的是一個<code>Function</code>類型的匿名函數，且匿名函數的執行環境是 global EC，所以<code>this</code>對象指向的是<code>window</code>。</p><p>我們希望打印的是<code>object</code>對象的<code>name</code>屬性，所以，可以在<code>getNameFunc</code>函數中把<code>this</code>對象賦值給一個變量，這樣一來匿名函數（我們的閉包）就可以引用這個變量，從而獲取到正確的<code>this</code>對象！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;The Window&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">    name: <span class="string">&quot;My Object&quot;</span>,</span><br><span class="line">    getNameFunc: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="built_in">this</span>;  <span class="comment">// 把我們希望的this對象賦值給that，使得閉包可以引用這個變量</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(that.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(object.getNameFunc()());  <span class="comment">// &quot;My Object&quot;</span></span><br></pre></td></tr></table></figure><h3 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h3><p>在閉包内引用外部函數的變量，會導致本應被回收的值無法被回收。</p><p>看下面這個例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assignHandler</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">&quot;someElement&quot;</span>);</span><br><span class="line">    element.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(element.id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由於閉包（匿名函數）保存了一個對<code>assignHandler</code>函數的活動對象（activation object）的引用，因此會導致無法減少 element 的引用數，因此它的内存將永遠不會被回收。通過修改一些代碼可以解決這個問題，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assignHandler</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">&quot;someElement&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> id = element.id;</span><br><span class="line">    element.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(id);</span><br><span class="line">    &#125;</span><br><span class="line">    element = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，把<code>element.id</code>的副本保存在一個變量中，就可以避免引用<code>element</code>對象，但是這樣還不能解決内存泄漏的問題。必須記住：<strong>閉包會引用外部函數的整個活動對象</strong>（activation object），其中包含著<code>element</code>。即使閉包不直接引用<code>element</code>，外部函數的活動對象中也會保存一個引用，所以有必要手動把<code>element</code>變量設成<code>null</code>，這樣就能解除對 DOM 對象的引用，確保正常回收其占用的内存。</p><h2 id="底層原理"><a href="#底層原理" class="headerlink" title="底層原理"></a>底層原理</h2><p>要徹底理解閉包，需要清楚地知道如何創建 scope chain，以及 scope chain 有什麽作用。</p><h3 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h3><p>在進一步理解底層原理前，我們需要先弄清楚幾個概念：</p><h4 id="執行環境（Execution-Context，簡稱-EC）"><a href="#執行環境（Execution-Context，簡稱-EC）" class="headerlink" title="執行環境（Execution Context，簡稱 EC）"></a>執行環境（Execution Context，簡稱 EC）</h4><p>這是JavaScript中最爲重要的一個概念。EC 的類型總共只有兩種——全局和局部（函數）。</p><p>每當你進入一個函數時，就會產生一個 EC，裡面存放著跟這個函數有關的資訊，並且把這個 EC 放入 stack 中，函數執行完畢後，再把該 EC 彈出，控制權返回之前的 EC。</p><p>示意圖如下，要記得除了 function 有 EC 以外，還有一個 global EC：</p><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@0b1851dcc3bd1b18747f5626876e472b10907d43/2020/10/25/25e8e1fa5a87827ad734fb951a36f93c.png"></p><h4 id="變量對象（Variable-Object，簡稱-VO-）"><a href="#變量對象（Variable-Object，簡稱-VO-）" class="headerlink" title="變量對象（Variable Object，簡稱 VO ）"></a>變量對象（Variable Object，簡稱 VO ）</h4><p>每個 EC 都有一個關聯的 VO，裡面保存著 EC 中的所有變量和函數。</p><h4 id="活動對象（Activation-Object，簡稱-AO）"><a href="#活動對象（Activation-Object，簡稱-AO）" class="headerlink" title="活動對象（Activation Object，簡稱 AO）"></a>活動對象（Activation Object，簡稱 AO）</h4><p>如果 EC 是函數，則進入時會產生一個相關聯的 AO。可以把 AO 作爲特別的 VO，它們都把一些相關的資訊放在裡面。所以在 global 時我們有 VO，在 function 内時我們有 AO。</p><p>兩者的差別很小，僅在於 AO 裡會有一個<code>arguments</code>對象（畢竟是給 function 用的），而 VO 中沒有這個對象。</p><p>創建 AO 的規則如下：</p><ol><li>把<code>arguments</code>對象放入 AO</li><li>把參數放到 AO 裡並設定好值，傳進來是什麽就是什麽，沒有值得設成<code>undefined</code></li><li>把函數聲明放入 AO，如果已經有同名的則覆蓋</li><li>把變量聲明放入 AO，如果已經有同名的則忽略該變量（即什麽都不做）</li></ol><p>看一個例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v);</span><br><span class="line">    <span class="keyword">var</span> v = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>當進入 test 函數的 EC 中時，創建 AO。把<code>arguments</code>對象加入 AO，因爲有參數傳入所以在 AO 中加入<code>v: 10</code>，test 中沒有内部函數所以不用添加，最後對於裡面的變量聲明，由於已經有<code>v</code>這個屬性了，所以忽略不管，因此 AO 就長這樣：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AO: &#123;</span><br><span class="line">    <span class="built_in">arguments</span>,</span><br><span class="line">    v: <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建立好 AO 後，才開始一行行執行，所以在第二行時會打印出<code>10</code>，因爲那個時候<code>v</code>確實是<code>10</code>，後來才會被換成<code>3</code>。</p><h4 id="作用域鏈（Scope-Chain）"><a href="#作用域鏈（Scope-Chain）" class="headerlink" title="作用域鏈（Scope Chain）"></a>作用域鏈（Scope Chain）</h4><p>每個 EC 都有自己的 scope chain，當進入 EC 時，scope chain就會被建立，且被初始化為 AO 加上 function 的<code>[[Scope]]</code>屬性。</p><p>簡單來説，意思就是當進入 EC 時，會做下面這件事：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scope chain = activation object + [[Scope]]</span><br></pre></td></tr></table></figure><p>那麽 function 的<code>[[Scope]]</code>屬性又是什麽呢？這個屬性其實就是創建函數時當下的 EC（函數外部的執行環境）。</p><p>也就是有這麽一個流程：</p><ol><li>當 function A 建立時，設置<code>A.[[Scope]] = scope chain of current EC</code></li><li>當進入一個 function A 時，創建一個新的 EC，並設置相應的作用域鏈為 <code>EC.scope_chain = AO + A.[[Scope]]</code></li></ol><blockquote><p>本質上 scope chain 就是一個指向 VO/AO 的指針列表，它只引用但不實際包含 VO/AO。</p></blockquote><h3 id="閉包實際流程"><a href="#閉包實際流程" class="headerlink" title="閉包實際流程"></a>閉包實際流程</h3><p>當某個函數被調用時，會創建一個 EC 及相應的 scope chain，然後使用<code>arguments</code>對象和其他傳入參數的值來初始化函數的 AO。</p><p>用下面這個範例實際跑一遍流程</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v1 = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vTest = <span class="number">20</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(v1, vTest);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> inner;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> inner = test();</span><br><span class="line">inner();</span><br></pre></td></tr></table></figure><h4 id="第一步：-進入-Global-EC"><a href="#第一步：-進入-Global-EC" class="headerlink" title="第一步： 進入 Global EC"></a>第一步： 進入 Global EC</h4><p>首先，進入 Global EC 並且初始化 VO 以及 scope chain，前面説過<code>scope chain = activation object + [[Scope]]</code>，由於這不是一個 function 所以沒有<code>[[Scope]]</code>，AO 用 VO 來代替，最後的Global EC 如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">globalEC = &#123;</span><br><span class="line">    VO: &#123;</span><br><span class="line">        v1: <span class="literal">undefined</span>,</span><br><span class="line">        inner: <span class="literal">undefined</span>,</span><br><span class="line">        test: <span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function">    &#125;,</span></span><br><span class="line"><span class="function">    <span class="title">scopeChain</span>: <span class="title">globalEC</span>.<span class="title">VO</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line">test.[[Scope]] = globalEC.scopeChain</span><br></pre></td></tr></table></figure><h4 id="第二步：執行代碼"><a href="#第二步：執行代碼" class="headerlink" title="第二步：執行代碼"></a>第二步：執行代碼</h4><p>跑了<code>v1 = 10</code>後，碰到<code>inner = test()</code>，現在準備進入<code>test</code>函數的 EC 了，進入以前我們目前的資訊長這樣：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">globalEC = &#123;</span><br><span class="line">    VO: &#123;</span><br><span class="line">        v1: <span class="number">10</span>,</span><br><span class="line">        inner: <span class="literal">undefined</span>,</span><br><span class="line">        test: <span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function">    &#125;,</span></span><br><span class="line"><span class="function">    <span class="title">scopeChain</span>: <span class="title">globalEC</span>.<span class="title">VO</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line">test.[[Scope]] = globalEC.scopeChain</span><br></pre></td></tr></table></figure><h4 id="第三步：進入-test-EC"><a href="#第三步：進入-test-EC" class="headerlink" title="第三步：進入 test EC"></a>第三步：進入 test EC</h4><blockquote><p>注：進入一個 EC 可以想成是在執行函數後，但還沒開始跑函數内部的代碼以前。所以每個函數你都可以想象成其實有兩個階段，第一個階段是進入 EC，第二個階段才是真的一行行執行代碼。</p></blockquote><p>進入時，先把 test EC 和 AO 建立起來，然後不要忘了<code>scope chain = activation object + [[Scope]]</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">testEC = &#123;</span><br><span class="line">    AO: &#123;</span><br><span class="line">        <span class="built_in">arguments</span>,</span><br><span class="line">        vTest: <span class="literal">undefined</span>,</span><br><span class="line">        inner: <span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function">    &#125;,</span></span><br><span class="line"><span class="function">    <span class="title">scopeChain</span>: </span></span><br><span class="line">      [testEC.AO, test.[[Scope]]]</span><br><span class="line">    = [testEC.AO, globalEC.scopeChain]</span><br><span class="line">    = [testEC.AO, globalEC.VO]</span><br><span class="line">&#125;</span><br><span class="line">inner.[[Scope]] = testEC.scopeChain = [testEC.AO, globalEC.VO]</span><br><span class="line"></span><br><span class="line">globalEC = &#123;</span><br><span class="line">    VO: &#123;</span><br><span class="line">        v1: <span class="number">10</span>,</span><br><span class="line">        inner: <span class="literal">undefined</span>,</span><br><span class="line">        test: <span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function">    &#125;,</span></span><br><span class="line"><span class="function">    <span class="title">scopeChain</span>: <span class="title">globalEC</span>.<span class="title">VO</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line">test.[[Scope]] = globalEC.scopeChain</span><br></pre></td></tr></table></figure><p>最後別忘了設置 inner 的 scope，<code>inner.[[Scope]] = testEC.scopeChain</code>。</p><p>可以看到，scope chain 本質上其實就是 VO 和 AO 的組合。</p><h4 id="第四步：-執行-test-中的代碼"><a href="#第四步：-執行-test-中的代碼" class="headerlink" title="第四步： 執行 test 中的代碼"></a>第四步： 執行 test 中的代碼</h4><p>跑了<code>vTest = 20</code>和<code>return inner</code>後，變成下面這樣</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">testEC = &#123;</span><br><span class="line">    AO: &#123;</span><br><span class="line">        <span class="built_in">arguments</span>,</span><br><span class="line">        vTest: <span class="number">20</span>,</span><br><span class="line">        inner: <span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function">    &#125;,</span></span><br><span class="line"><span class="function">    <span class="title">scopeChain</span>: </span></span><br><span class="line">      [testEC.AO, test.[[Scope]]]</span><br><span class="line">    = [testEC.AO, globalEC.scopeChain]</span><br><span class="line">    = [testEC.AO, globalEC.VO]</span><br><span class="line">&#125;</span><br><span class="line">inner.[[Scope]] = testEC.scopeChain = [testEC.AO, globalEC.VO]</span><br><span class="line"></span><br><span class="line">globalEC = &#123;</span><br><span class="line">    VO: &#123;</span><br><span class="line">        v1: <span class="number">10</span>,</span><br><span class="line">        inner: <span class="literal">undefined</span>,</span><br><span class="line">        test: <span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function">    &#125;,</span></span><br><span class="line"><span class="function">    <span class="title">scopeChain</span>: <span class="title">globalEC</span>.<span class="title">VO</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line">test.[[Scope]] = globalEC.scopeChain</span><br></pre></td></tr></table></figure><p>雖然<code>test</code>函數<code>return</code>後就結束了，理論上資源應該被釋放，但是由於<code>inner.[[Scope]]</code>還引用著<code>testEC.AO</code>，所以<code>testEC.AO</code>仍存在於記憶體中，沒有被釋放。</p><h4 id="第五步：進入-inner-EC"><a href="#第五步：進入-inner-EC" class="headerlink" title="第五步：進入 inner EC"></a>第五步：進入 inner EC</h4><p>先初始化 inner EC 和其 AO</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">innerEC = &#123;</span><br><span class="line">    AO: &#123;</span><br><span class="line">        <span class="built_in">arguments</span></span><br><span class="line">    &#125;,</span><br><span class="line">    scopeChain: </span><br><span class="line">      [innerEC.AO, inner.[[Scope]]]</span><br><span class="line">    = [innerEC.AO, testEC.scopeChain]</span><br><span class="line">    = [innerEC.AO, testEC.AO, globalEC.VO]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testEC = &#123;</span><br><span class="line">    AO: &#123;</span><br><span class="line">        <span class="built_in">arguments</span>,</span><br><span class="line">        vTest: <span class="number">20</span>,</span><br><span class="line">        inner: <span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function">    &#125;,</span></span><br><span class="line">    scopeChain: [testEC.AO, globalEC.VO]</span><br><span class="line">&#125;</span><br><span class="line">inner.[[Scope]] = testEC.scopeChain = [testEC.AO, globalEC.VO]</span><br><span class="line"></span><br><span class="line">globalEC = &#123;</span><br><span class="line">    VO: &#123;</span><br><span class="line">        v1: <span class="number">10</span>,</span><br><span class="line">        inner: <span class="literal">undefined</span>,</span><br><span class="line">        test: <span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function">    &#125;,</span></span><br><span class="line"><span class="function">    <span class="title">scopeChain</span>: <span class="title">globalEC</span>.<span class="title">VO</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line">test.[[Scope]] = globalEC.scopeChain</span><br></pre></td></tr></table></figure><h4 id="第六步：執行-inner"><a href="#第六步：執行-inner" class="headerlink" title="第六步：執行 inner"></a>第六步：執行 inner</h4><p><code>inner</code>函數會打印<code>vTest</code>和<code>v1</code>值，從 scope chain 中尋找目標變量，發現在 innerEC 自己的 AO 裡找不到，繼續往上找，在 testEC.AO 裡找到了 <code>vTest</code>，但<code>v1</code>還沒找到所以繼續往上找，終於在 globalEC.VO 中找到了<code>v1</code>，最後成功把這兩個值打印出來。</p><p>上面的流程非常詳細，看完對整個閉包形成的過程應該很有幫助。</p><h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><p><a href="https://blog.techbridge.cc/2018/12/08/javascript-closure/">所有的函式都是閉包：談 JS 中的作用域與 Closure</a></p><p><a href="http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html">学习Javascript闭包（Closure）——阮一峰</a></p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS基礎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS佈局之外邊距摺叠（margin collapsing）</title>
      <link href="2020/10/21/CSS%E4%BD%88%E5%B1%80%E4%B9%8B%E5%A4%96%E9%82%8A%E8%B7%9D%E6%91%BA%E5%8F%A0%EF%BC%88margin-collapsing%EF%BC%89/"/>
      <url>2020/10/21/CSS%E4%BD%88%E5%B1%80%E4%B9%8B%E5%A4%96%E9%82%8A%E8%B7%9D%E6%91%BA%E5%8F%A0%EF%BC%88margin-collapsing%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>會碰到跟margin collapsing有關的問題，主要是在容器的頂部，至少我第一次碰到的時候是這樣。</p><p>比如有下面這樣的結構，給child添加<code>margin: 0 auto</code>使它水平置中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@82edc4c7e9ed42ebcc1d69b5f96663e40e832457/2020/10/21/133f812c22f6572d38b1608910d86c59.png"></p><p>如果我不喜歡child緊貼容器頂部，希望它與頂部之間有點距離，可以這麽做：<code>margin: 20px auto</code>，給child頂部添加外邊距。但實際上，效果是下面這樣的。</p><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@659aca627556f043f8654b21e42c34642c6c51eb/2020/10/21/c0f71e43c182a69833d5aeccc93870bb.png"></p><p>可以看到，child仍然緊貼著容器頂部，倒是整個容器好像被往下推了。這就是本篇文章要説的<strong>外邊距摺叠</strong>問題。</p><h2 id="什麽是外邊距摺叠（margin-collapsing）？"><a href="#什麽是外邊距摺叠（margin-collapsing）？" class="headerlink" title="什麽是外邊距摺叠（margin collapsing）？"></a>什麽是外邊距摺叠（margin collapsing）？</h2><p>首先，margin collapsing只會發生在垂直方向上，即<code>margin-top</code>和<code>margin-bottom</code>才有可能發生摺叠。</p><p>當有兩個垂直方向上的margin直接接觸時（兩個margin之間沒有border、padding、行内元素、文字等），這兩個margin會融合，而體現出來的是兩者間較大的那個margin。如下圖所示</p><blockquote><p>注意：這裡默認兩個元素是在同一個Formatting Context中。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@86a42b7a80e0c10aede54e1a5b91b6458e1be0f4/2020/10/21/c4b011262243f1eb6c37c2bc71997ae7.png"></p><h2 id="兩種情況"><a href="#兩種情況" class="headerlink" title="兩種情況"></a>兩種情況</h2><h3 id="1-一個元素的bottom-margin和他下面的兄弟元素的top-margin摺叠"><a href="#1-一個元素的bottom-margin和他下面的兄弟元素的top-margin摺叠" class="headerlink" title="1. 一個元素的bottom margin和他下面的兄弟元素的top margin摺叠"></a>1. 一個元素的bottom margin和他下面的兄弟元素的top margin摺叠</h3><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@3a32e97186345afd172d97addb6c5c21605ee982/2020/10/21/6f153b68ee4e5acf6f06d1c94d7907a5.png"></p><h3 id="2-容器元素的top-bottom-margin和第一個子元素的top-bottom-margin摺叠"><a href="#2-容器元素的top-bottom-margin和第一個子元素的top-bottom-margin摺叠" class="headerlink" title="2. 容器元素的top/bottom margin和第一個子元素的top/bottom margin摺叠"></a>2. 容器元素的top/bottom margin和第一個子元素的top/bottom margin摺叠</h3><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@cd4102fea91ff2605e47702cc6f5fdc6833b32d3/2020/10/21/7d035bd471f7c170d11a635b9b7caeb3.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@623cf08d5efaa3ba444126f7d01fea249c6cd3ea/2020/10/21/71fb7d8f04e46372a996a836f3e64a2f.png"></p><h2 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h2><ol><li><p>阻斷margin之間的直接接觸即可，可以通過設置border, padding，或用<code>inline</code>元素（如文字）等隔開。常用方法是給容器元素添加<code>padding-top: 1px</code>。</p></li><li><p>藉助BFC（Block Formatting Context）形成阻隔，如浮動或<code>overflow: hidden</code>等。創建BFC的方法有如下幾種：</p><ul><li>elements made to float using <code>float</code></li><li>absolutely positioned elements (including <code>position: fixed</code> or <code>position: sticky</code>)</li><li>elements with <code>display: inline-block</code></li><li>table cells or elements with <code>display: table-cell</code></li><li>table captions or elements with <code>display: table-caption</code></li><li>block elements where <code>overflow</code> has a value other than <code>visible</code></li></ul><blockquote><p>不瞭解BFC是什麽可以看參考文章第三篇：MDN中的介紹</p><p>更多創建BFC的方法也可以在MDN的介紹中找到。</p></blockquote></li></ol><h2 id="參考文章及影片"><a href="#參考文章及影片" class="headerlink" title="參考文章及影片"></a>參考文章及影片</h2><p><a href="https://medium.com/@joseph0crick/margin-collapse-in-css-what-why-and-how-328c10e37ca0">Margin Collapse in CSS: What, Why, and How</a></p><p><a href="https://www.youtube.com/watch?v=uEfH6qnFF6Y">[YOUTUBE] Margin and Padding Deep Dive: Collapsing margins, resets, and CSS box-sizing</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flow_Layout/Intro_to_formatting_contexts">Introduction to formatting contexts</a></p>]]></content>
      
      
      <categories>
          
          <category> HTML/CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS佈局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS佈局之深度理解CSS中的水平垂直居中</title>
      <link href="2020/10/20/CSS%E4%BD%88%E5%B1%80%E4%B9%8B%E6%B7%B1%E5%BA%A6%E7%90%86%E8%A7%A3CSS%E4%B8%AD%E7%9A%84%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/"/>
      <url>2020/10/20/CSS%E4%BD%88%E5%B1%80%E4%B9%8B%E6%B7%B1%E5%BA%A6%E7%90%86%E8%A7%A3CSS%E4%B8%AD%E7%9A%84%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>對於剛開始學習前端的人來説，很多都經歷過這樣一個時期，知道不同的屬性代表什麽意思，也知道一定有辦法可以達成某種效果，但自己只能通過不斷微調、試錯、擺弄一下代碼然後看一眼瀏覽器上的變化，最後雖然達成了效果，但是心裡卻很不踏實，覺得自己並沒有掌握CSS的佈局技巧。</p><p>這種體驗確實非常令人沮喪，而且往往很浪費時間、效率低下。所以，學會總結技巧十分重要。不僅可以作爲學習筆記加深印象，而且也可以在有需要的時候快速有效的找到參考，甚至可以幫到其他人。</p><h2 id="元素的水平置中"><a href="#元素的水平置中" class="headerlink" title="元素的水平置中"></a>元素的水平置中</h2><h3 id="1-使用text-align-center"><a href="#1-使用text-align-center" class="headerlink" title="1. 使用text-align: center"></a>1. 使用<code>text-align: center</code></h3><ul><li>容器元素必須是塊級元素（block），且要設置<code>width</code>屬性</li><li>容器元素要設置<code>text-align: center</code></li><li><strong>重要的一點：子元素要設置<code>display: inline-block</code></strong></li></ul><h3 id="2-使用margin-auto"><a href="#2-使用margin-auto" class="headerlink" title="2. 使用margin: auto"></a>2. 使用<code>margin: auto</code></h3><ul><li>容器元素要設置<code>width</code></li><li>子元素要設置<code>margin: auto</code>或<code>margin: 0 auto</code></li></ul><blockquote><p>注：如果只要水平置中，<code>margin-top</code>和<code>margin-bottom</code>也可以是任意值。但是要注意<strong>外邊距摺叠</strong>的問題。</p><p>關於外邊距摺叠可以看這篇文章 <a href="https://ptrln216.github.io/2020/10/21/CSS%E4%BD%88%E5%B1%80%E4%B9%8B%E5%A4%96%E9%82%8A%E8%B7%9D%E6%91%BA%E5%8F%A0%EF%BC%88margin-collapsing%EF%BC%89/">CSS佈局之外邊距摺叠（margin collapsing）</a></p></blockquote><h2 id="元素水平垂直置中"><a href="#元素水平垂直置中" class="headerlink" title="元素水平垂直置中"></a>元素水平垂直置中</h2><h3 id="1-使用position-absolute"><a href="#1-使用position-absolute" class="headerlink" title="1. 使用position: absolute"></a>1. 使用<code>position: absolute</code></h3><p>這個方法可以水平垂直同時置中，也可以只置中一個維度。</p><ul><li>容器元素要設置<code>width</code>屬性</li><li>容器元素要設置<code>position: relative</code></li><li>子元素設置<code>position: absolute</code></li><li>子元素設置<code>top: 0</code>, <code>right: 0</code>, <code>bottom: 0</code>, <code>left: 0</code></li><li>子元素設置<code>margin: auto</code></li></ul><blockquote><p>如果只想水平置中，則<code>margin: 0 auto</code>；如果只想垂直置中，則<code>margin: auto 0</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">background-color</span>: lightskyblue;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@ecc260fe4fac09c6f8a20a250a8bb3f10f49eca8/2020/10/21/00856d13bb727ba2a64a66db79a18cbd.png"></p><h3 id="2-使用display-flex"><a href="#2-使用display-flex" class="headerlink" title="2. 使用display: flex"></a>2. 使用<code>display: flex</code></h3><p>CSS3提供的新屬性</p><p>這個方法可以水平垂直同時置中，也可以只置中一個維度。</p><ul><li>容器元素設置<code>display: flex</code></li><li>容器元素設置<code>justify-content: center</code>，水平置中</li><li>容器元素設置<code>align-items: center</code>，垂直置中</li></ul><h3 id="3-使用transform-translate-方法"><a href="#3-使用transform-translate-方法" class="headerlink" title="3. 使用transform: translate()方法"></a>3. 使用<code>transform: translate()</code>方法</h3><p>CSS3提供的新方法</p><p>這個方法可以水平垂直同時置中，也可以只置中一個維度。</p><ul><li>容器元素設置<code>width</code>和<code>height</code></li><li>子元素設置<code>top: 50%</code>和<code>left: 50%</code></li><li>子元素設置<code>transform: translate(-50%, -50%)</code></li><li>子元素設置<code>position: relative</code></li></ul><blockquote><p>注釋：<code>top</code>、<code>left</code>屬性在<code>position: static</code>（默認）情況下不管用。</p></blockquote><h3 id="4-使用display-table-cell和vertical-align"><a href="#4-使用display-table-cell和vertical-align" class="headerlink" title="4. 使用display: table-cell和vertical-align"></a>4. 使用<code>display: table-cell</code>和<code>vertical-align</code></h3><p>這個方法可以置中文字、圖片及塊級元素。但經常用於置中文字。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>Some text...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">display</span>: table-cell;    <span class="comment">/* 用於垂直置中，把容器變成table-cell */</span></span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: lightskyblue;</span><br><span class="line">    <span class="attribute">margin</span>: auto;  <span class="comment">/* 用於水平置中，也可以用margin: 0 auto */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文字的水平垂直置中"><a href="#文字的水平垂直置中" class="headerlink" title="文字的水平垂直置中"></a>文字的水平垂直置中</h2><h4 id="1-單行文字"><a href="#1-單行文字" class="headerlink" title="1. 單行文字"></a>1. 單行文字</h4><p>水平置中用<code>text-align</code>屬性即可實現。</p><p>垂直置中將文字的<code>line-height</code>設置為容器的高度即可。</p><p>用一個簡單的例子來演示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is headline<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>樣式如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;  <span class="comment">/* 容器高度 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, Helvetica, sans-serif;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;  <span class="comment">/* 水平置中 */</span></span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">200px</span>;  <span class="comment">/* 垂直置中 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@0bbb92a749e749d40d65979c110bb5ff895c981e/2020/10/20/c88de7f3f2c0630f54092a0addea2d20.png"></p><h4 id="2-多行文字"><a href="#2-多行文字" class="headerlink" title="2. 多行文字"></a>2. 多行文字</h4><p>參考這篇 <a href="https://ptrln216.github.io/2020/10/18/CSS%E6%8A%80%E5%B7%A7-%E4%BD%BF%E7%94%A8display-table%E5%92%8Cdisplay-table-cell%E5%AF%A6%E7%8F%BE%E5%96%AE%E8%A1%8C%E3%80%81%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/">CSS技巧 使用display:table和display:table-cell實現單行、多行文本垂直居中</a></p><h2 id="背景圖片的置中"><a href="#背景圖片的置中" class="headerlink" title="背景圖片的置中"></a>背景圖片的置中</h2><p>如果一個容器設置了<code>background-image</code>屬性，那背景圖片要怎麽置中呢？</p><p>我們用<code>&lt;div class=&quot;container&quot;&gt;</code>來説明，如果背景圖片設置了<code>no-repeat</code>，則默認位置會在容器的左上角。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#eee</span> <span class="built_in">url</span>(https://somelinks...) no-repeat;</span><br><span class="line">    <span class="comment">/* background-position: center;  控制背景圖片位置以置中 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@463771722d6a9820760a9afad6bd4304070c0cfb/2020/10/21/69308d6f13057cda6445f0463dc5480e.png"></p><p><code>background-position</code>屬性有以下值可以選</p><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@3306891c8c87a778b89ebf6374f10fcbfcf2163a/2020/10/21/b545da16d2889f5147190c4185909689.png"></p><h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><p><a href="https://designshack.net/articles/css/how-to-center-anything-with-css/">How to Center Anything With CSS</a></p><p><a href="https://blog.csdn.net/weixin_37580235/article/details/82317240">CSS水平居中+垂直居中+水平/垂直居中的方法总结</a></p><p><a href="https://medium.com/@dodung1221/how-to-center-a-div-tag-in-css-horizontal-vertical-align-849aa3a67a23">How to center a div tag in CSS — horizontal &amp; vertical align</a></p>]]></content>
      
      
      <categories>
          
          <category> HTML/CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS佈局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS函數之linear-gradient()及其方向問題</title>
      <link href="2020/10/18/CSS%E5%87%BD%E6%95%B8%E4%B9%8Blinear-gradient/"/>
      <url>2020/10/18/CSS%E5%87%BD%E6%95%B8%E4%B9%8Blinear-gradient/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="CSS-linear-gradient-函數"><a href="#CSS-linear-gradient-函數" class="headerlink" title="CSS linear-gradient()函數"></a>CSS <code>linear-gradient()</code>函數</h2><p><code>linear-gradient()</code>函數可用於創建一個兩種（或多種）顔色漸變的圖片。</p><p>要創建一個線性漸變，需要指定一個方向（或角度），以及指定兩種（或多種）顔色。</p><h3 id="標準語法"><a href="#標準語法" class="headerlink" title="標準語法"></a>標準語法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">direction</span>, <span class="selector-tag">color-stop1</span>, <span class="selector-tag">color-stop2</span>, ...);</span><br></pre></td></tr></table></figure><p>方向參數是漸變的角度，可以是度數，如<code>0deg</code>，<code>45deg</code>等。也可以是關鍵字，有如下幾種</p><ul><li><code>to left</code></li><li><code>to right</code></li><li><code>to top</code></li><li><code>to bottom</code></li><li><code>to left top</code></li><li><code>to left bottom</code></li><li><code>to right top</code></li><li><code>to right bottom</code></li></ul><blockquote><p><strong>注意：以上關鍵字，僅屬標準語法才有！</strong></p><p>標準語法中<code>0deg</code>相當於<code>to top</code></p></blockquote><h3 id="不同瀏覽器的具體函數名（即前綴）"><a href="#不同瀏覽器的具體函數名（即前綴）" class="headerlink" title="不同瀏覽器的具體函數名（即前綴）"></a>不同瀏覽器的具體函數名（即前綴）</h3><p>目前的幾種現代瀏覽器内核，主要有Mozilla（Firefox等）、WebKit（Safari、Chrome等）、Opera（Opera瀏覽器）、Trident（IE瀏覽器）。不同的瀏覽器有不同的函數來支持CSS3。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Mozilla */</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">-moz-linear-gradient</span>(<span class="selector-tag">left</span>, <span class="selector-tag">red</span>, <span class="selector-tag">blue</span>);</span><br><span class="line"><span class="comment">/* Webkit */</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">-webkit-linear-gradient</span>(<span class="selector-tag">left</span>, <span class="selector-tag">red</span>, <span class="selector-tag">blue</span>);</span><br><span class="line"><span class="comment">/* Opera 11.10+ */</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">-o-linear-gradient</span>(<span class="selector-tag">left</span>, <span class="selector-tag">red</span>, <span class="selector-tag">blue</span>);</span><br><span class="line"><span class="comment">/* IE */</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">-ms-linear-gradient</span>(<span class="selector-tag">left</span>, <span class="selector-tag">red</span>, <span class="selector-tag">blue</span>);</span><br></pre></td></tr></table></figure><h2 id="不同瀏覽器和標準語法的方向不同！！"><a href="#不同瀏覽器和標準語法的方向不同！！" class="headerlink" title="不同瀏覽器和標準語法的方向不同！！"></a>不同瀏覽器和標準語法的方向不同！！</h2><h3 id="當方向設爲角度時"><a href="#當方向設爲角度時" class="headerlink" title="當方向設爲角度時"></a>當方向設爲角度時</h3><h4 id="標準語法（無前綴）設置角度"><a href="#標準語法（無前綴）設置角度" class="headerlink" title="標準語法（無前綴）設置角度"></a>標準語法（無前綴）設置角度</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(0<span class="selector-tag">deg</span>, <span class="selector-tag">red</span>, <span class="selector-tag">blue</span>);</span><br></pre></td></tr></table></figure><p>在Chrome下長這樣，標準語法中，<code>0deg</code>相當於<code>to top</code>，是一個從下往上的漸變，如果是正值的話，則是<strong>順時針</strong>旋轉。</p><p>記住！這是在<strong>沒有前綴</strong>的情況下！</p><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@010b924451a378dca63015a55ae77140694ba086/2020/10/20/2797519b7186bbfbde1b45a20bf05cdc.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@bf85e29d7f94fdf33292079f32a6969f4b677849/2020/10/20/407c491105d5fc82ff512471515eb087.png"></p><p>標準語法下，漸變的角度變化是<strong>順時針</strong>方向，看動態圖會更清楚。</p><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@880b3f930615e9392edbf0c10c7b7b60d7075e54/2020/10/20/5a3154323ac1d8b0055c17d9d88aa3a8.png"></p><h4 id="瀏覽器（有前綴）設置角度"><a href="#瀏覽器（有前綴）設置角度" class="headerlink" title="瀏覽器（有前綴）設置角度"></a>瀏覽器（有前綴）設置角度</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">-webkit-linear-gradient</span>(0<span class="selector-tag">deg</span>, <span class="selector-tag">red</span>, <span class="selector-tag">blue</span>);</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">-moz-linear-gradient</span>(0<span class="selector-tag">deg</span>, <span class="selector-tag">red</span>, <span class="selector-tag">blue</span>);</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">-o-linear-gradient</span>(0<span class="selector-tag">deg</span>, <span class="selector-tag">red</span>, <span class="selector-tag">blue</span>);</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">-ms-linear-gradient</span>(0<span class="selector-tag">deg</span>, <span class="selector-tag">red</span>, <span class="selector-tag">blue</span>);</span><br></pre></td></tr></table></figure><p>加了前綴，設為<code>0deg</code>時竟然是從左往右漸變，和標準語法的從下至上不同。</p><blockquote><p>Chrome, FireFox, Opera都是如此</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@ebcf75a060771f564a190f6e570bf5f2265fa817/2020/10/20/dd0c6e622f088cfd89c29f7ffbffc502.png"></p><p>再來看一下<code>45deg</code>的情況，這時候竟然發現，和標準語法的<code>45deg</code>結果相同！於是我們得出結論，加前綴的時候，正值會按<strong>逆時針</strong>旋轉。</p><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@428074f1a678b31eff8a6960566f1cc9ff605acd/2020/10/20/2d1b463ccc72c88bec8dd92a90d90c6b.png"></p><h3 id="當方向設置爲關鍵字"><a href="#當方向設置爲關鍵字" class="headerlink" title="當方向設置爲關鍵字"></a>當方向設置爲關鍵字</h3><h4 id="標準語法（無前綴）設置關鍵字"><a href="#標準語法（無前綴）設置關鍵字" class="headerlink" title="標準語法（無前綴）設置關鍵字"></a>標準語法（無前綴）設置關鍵字</h4><p>標準語法的關鍵字都是<code>to</code>開頭，即到某個方向，所以<code>to bottom</code>是一個從上到下的漸變。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">bottom</span>, <span class="selector-tag">red</span>, <span class="selector-tag">blue</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@887ca042a8fd23b814495d697732322a424f8cda/2020/10/20/ec6f90fd217ba99e9d257ceaf2054c51.png"></p><h4 id="瀏覽器（有前綴）設置關鍵字"><a href="#瀏覽器（有前綴）設置關鍵字" class="headerlink" title="瀏覽器（有前綴）設置關鍵字"></a>瀏覽器（有前綴）設置關鍵字</h4><p>有前綴的<code>linear-gradient()</code>函數，接收方向關鍵字時沒有<code>to</code>，且解釋方向時會把關鍵字作爲漸變的起點。</p><p>意思是，原本的<code>to bottom</code>指的是從上到下，而現在<code>bottom</code>指的是從下到上。和標準語法的關鍵字要反過來寫。</p><p>看這個對應表格</p><table><thead><tr><th>W3C標準</th><th>前綴語法</th></tr></thead><tbody><tr><td>to right</td><td>left</td></tr><tr><td>to left</td><td>right</td></tr><tr><td>to top</td><td>bottom</td></tr><tr><td>to bottom</td><td>top</td></tr><tr><td>to right bottom</td><td>left top</td></tr><tr><td>to right top</td><td>left bottom</td></tr><tr><td>to left bottom</td><td>right top</td></tr><tr><td>to left top</td><td>right bottom</td></tr></tbody></table><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>在大部分的移動設備上，都需要加<code>-webkit-</code>前綴，因爲移動設備只識別有<code>-webkit-</code>前綴的語句。</p><p>鑒於標準語法與有前綴時的方向設置並不相符，所以寫CSS3代碼的時候，不可以無腦的把一堆有前綴和沒前綴的都寫上，這樣很有可能導致瀏覽器和移動設備上看到的效果不相同。</p><h3 id="如何統一效果？"><a href="#如何統一效果？" class="headerlink" title="如何統一效果？"></a>如何統一效果？</h3><h4 id="方向設置成角度時"><a href="#方向設置成角度時" class="headerlink" title="方向設置成角度時"></a>方向設置成角度時</h4><p>標準語法與有前綴的語法，角度加在一起為<code>90deg</code>即可。</p><p>這是因爲標準語法與有前綴的旋轉方向是相反的，且起始方向相差<code>90deg</code>，所以兩者要旋轉的角度是互餘的。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">-webkit-linear-gradient</span>(30<span class="selector-tag">deg</span>, <span class="selector-tag">red</span>, <span class="selector-tag">blue</span>);</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">-moz-linear-gradient</span>(30<span class="selector-tag">deg</span>, <span class="selector-tag">red</span>, <span class="selector-tag">blue</span>);</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">-o-linear-gradient</span>(30<span class="selector-tag">deg</span>, <span class="selector-tag">red</span>, <span class="selector-tag">blue</span>);</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">-ms-linear-gradient</span>(30<span class="selector-tag">deg</span>, <span class="selector-tag">red</span>, <span class="selector-tag">blue</span>);</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(60<span class="selector-tag">deg</span>, <span class="selector-tag">red</span>, <span class="selector-tag">blue</span>);</span><br></pre></td></tr></table></figure><h4 id="方向設置成關鍵字時"><a href="#方向設置成關鍵字時" class="headerlink" title="方向設置成關鍵字時"></a>方向設置成關鍵字時</h4><p>標準語法與有前綴的關鍵字反過來寫即可。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">-webkit-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-tag">red</span>, <span class="selector-tag">blue</span>);</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">-moz-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-tag">red</span>, <span class="selector-tag">blue</span>);</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">-o-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-tag">red</span>, <span class="selector-tag">blue</span>);</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">-ms-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-tag">red</span>, <span class="selector-tag">blue</span>);</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">bottom</span>, <span class="selector-tag">red</span>, <span class="selector-tag">blue</span>);</span><br></pre></td></tr></table></figure><h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><p><a href="https://digcss.com/css3-linear-gradient-direction-angle-problem/?unapproved=4492&moderation-hash=f3f88b878a407fa1dc0480c54fdcc7c9#comment-4492">CSS3 linear-gradient的方向（角度）问题</a></p>]]></content>
      
      
      <categories>
          
          <category> HTML/CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS函數 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS技巧 使用display:table和display:table-cell實現單行、多行文本垂直居中</title>
      <link href="2020/10/18/CSS%E6%8A%80%E5%B7%A7-%E4%BD%BF%E7%94%A8display-table%E5%92%8Cdisplay-table-cell%E5%AF%A6%E7%8F%BE%E5%96%AE%E8%A1%8C%E3%80%81%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/"/>
      <url>2020/10/18/CSS%E6%8A%80%E5%B7%A7-%E4%BD%BF%E7%94%A8display-table%E5%92%8Cdisplay-table-cell%E5%AF%A6%E7%8F%BE%E5%96%AE%E8%A1%8C%E3%80%81%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>要實現單行文本的垂直置中，並不是什麽難事，一般的思路是高度等於行高，但這僅適用於單行文本。但是如果要實現多行文本置中的話，該怎麽做呢？</p><p>想到這個問題時，不自覺地想到可以用<code>flex</code>進行佈局，但那只能使元素垂直居中，而不作用於文本。</p><h2 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h2><p>結合使用CSS屬性<code>display: table</code>和<code>display: table-cell</code>，可以解決多行文本垂直置中的問題。</p><p>寫一個簡單的多行文本，包裹在<code>div</code>中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        hello world <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        hello world <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        hello world <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        hello world <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        hello world</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>設置簡單的樣式，並畫出<code>div</code>和<code>p</code>的邊框，看一下當前文本的排列在什麽位置。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>p</code>設置了寬度和高度，但沒有設置行高，可以看到<code>p</code>元素占滿了整個<code>div</code>，其文本垂直水平目前都不居中。</p><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@bf2f8b8555fa1594fef5e8703a0b89301518eeb5/2020/10/18/28c3532ae7e13ec9d4f2315d761c7ef9.png"></p><p>進行如下樣式設置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">    <span class="comment">/* 文本水平居中 */</span></span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="comment">/* 文本垂直居中 */</span></span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid;</span><br><span class="line">    <span class="comment">/* 文本垂直居中 */</span></span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用<code>text-align: center</code>，可以輕鬆設置文本的水平居中。</p><p>而通過把父元素設置爲<code>display: table</code>，子元素設置爲<code>display: table-cell</code>，就可以通過模擬<code>table</code>的佈局屬性，不論文字的行數、内容和行高是多少，都會整體垂直居中。</p><blockquote><p>默認情況下，圖片、按鈕、文字和單元格都可以使用<code>vertical-align</code>屬性</p><p>不熟悉的可以看這篇文章 <a href="https://ptrln216.github.io/2020/10/17/CSS%E5%B1%AC%E6%80%A7%E4%B9%8Bvertical-align/">CSS屬性之vertical-align</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@8682f8cdab89cd376c635282bc0157f28a506592/2020/10/18/2dfce9c5774920a0f5616b8390cd1225.png"></p>]]></content>
      
      
      <categories>
          
          <category> HTML/CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS屬性之box-shadow</title>
      <link href="2020/10/17/CSS%E5%B1%AC%E6%80%A7%E4%B9%8Bbox-shadow/"/>
      <url>2020/10/17/CSS%E5%B1%AC%E6%80%A7%E4%B9%8Bbox-shadow/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="box-shadow屬性"><a href="#box-shadow屬性" class="headerlink" title="box-shadow屬性"></a><code>box-shadow</code>屬性</h2><h3 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">box-shadow</span>: <span class="selector-tag">h-shadow</span> <span class="selector-tag">v-shadow</span> <span class="selector-tag">blur</span> <span class="selector-tag">spread</span> <span class="selector-tag">color</span> <span class="selector-tag">inset</span>;</span><br></pre></td></tr></table></figure><blockquote><p>注：可以添加多個陰影，每個陰影用逗號隔開即可</p></blockquote><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>h-shadow</td><td>必需。水平陰影位置。允許負值。</td></tr><tr><td>v-shadow</td><td>必需。垂直陰影位置。允許負值。</td></tr><tr><td>blur</td><td>可選。模糊距離。</td></tr><tr><td>spread</td><td>可選。陰影尺寸。</td></tr><tr><td>color</td><td>可選。陰影顔色。</td></tr><tr><td>inset</td><td>可選。將外部陰影（outset）改爲内部陰影。</td></tr></tbody></table><h3 id="取值説明"><a href="#取值説明" class="headerlink" title="取值説明"></a>取值説明</h3><ul><li><code>h-shadow</code>和<code>v-shadow</code>：設置陰影的水平/垂直偏移，如果是正值則陰影在元素右邊和下邊。如果都為<code>0</code>，那麽陰影在元素正後方，這時如果設置了<code>blur</code>或<code>spread</code>則有模糊效果。</li><li><code>blur</code>：值越大，模糊面積越大，陰影就越大越淡。不能爲負數。默認爲<code>0</code>，此時陰影邊緣鋒利。</li><li><code>spread</code>：取正值時，陰影擴大；負值時，陰影縮小。默認為<code>0</code>，此時陰影與元素同樣大。</li></ul><p>可以看下面這張圖，更直觀一點，有助於理解。</p><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@05486e999dd1d97c4de28b9b2adb03d283a2b79a/2020/10/18/7e0564e25a4963bc3e3a6ca5a879809b.png"></p>]]></content>
      
      
      <categories>
          
          <category> HTML/CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS屬性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS屬性之vertical-align</title>
      <link href="2020/10/17/CSS%E5%B1%AC%E6%80%A7%E4%B9%8Bvertical-align/"/>
      <url>2020/10/17/CSS%E5%B1%AC%E6%80%A7%E4%B9%8Bvertical-align/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="vertical-align屬性"><a href="#vertical-align屬性" class="headerlink" title="vertical-align屬性"></a><code>vertical-align</code>屬性</h2><p>學習前端的人，多少都用過<code>text-align</code>屬性，該屬性可以用來設置文本的橫向位置。因此很多人第一次碰到<code>vertical-align</code>時，會自然地認爲這個屬性是用來控制文本的垂直位置，但實際上這種理解是錯誤的。</p><p>其實，<code>vertical-align</code>是用來設置<strong>行内元素</strong>的縱向對齊方式的，該屬性定義行内元素的基線，相對於該元素所在行的基線的垂直對齊。</p><h3 id="vertical-align屬性的可選項："><a href="#vertical-align屬性的可選項：" class="headerlink" title="vertical-align屬性的可選項："></a><code>vertical-align</code>屬性的可選項：</h3><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>baseline</td><td>默認。元素放在父元素的基線上。</td></tr><tr><td>sub</td><td>對齊文本的下標</td></tr><tr><td>super</td><td>對齊文本的上標</td></tr><tr><td>top</td><td>把元素頂端與行中最高元素的頂端對齊</td></tr><tr><td>text-top</td><td>把元素頂端與父元素字體的頂端對齊</td></tr><tr><td>middle</td><td>把此元素放在父元素中部</td></tr><tr><td>bottom</td><td>把元素頂端與行中最低元素的頂端對齊</td></tr><tr><td>text-bottom</td><td>把元素底端與父元素字體的底端對齊</td></tr><tr><td>length</td><td>正值表示向上移動，負值表示向下</td></tr><tr><td>%</td><td>使用”line-height”屬性的百分比值，來控制元素的移動</td></tr><tr><td>inherit</td><td>從父元素繼承vertical-align屬性的值</td></tr></tbody></table><p>光看表格内的描述還是有些抽象的，下面的兩張圖有助於幫助理解。</p><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@6b85601a025f87c354c3d50cff04faac49563cd4/2020/10/17/cf8ade9c0df5bd26c4ec2218c6f7d615.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@e7b822b521d88514f5978c323f9c8f3d6acdedff/2020/10/17/4ab52b95109ed32cb32711b10a42399a.png"></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>使用<code>vertical-align</code>屬性，還能夠實現單行、甚至多行的文本垂直居中。</p><p>感興趣可以看這篇文章 <a href="https://ptrln216.github.io/2020/10/18/CSS%E6%8A%80%E5%B7%A7-%E4%BD%BF%E7%94%A8display-table%E5%92%8Cdisplay-table-cell%E5%AF%A6%E7%8F%BE%E5%96%AE%E8%A1%8C%E3%80%81%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/">CSS技巧 使用display:table和display:table-cell實現單行、多行文本垂直居中</a></p>]]></content>
      
      
      <categories>
          
          <category> HTML/CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS屬性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS屬性之box-sizing</title>
      <link href="2020/10/17/CSS%E5%B1%AC%E6%80%A7%E4%B9%8Bbox-sizing/"/>
      <url>2020/10/17/CSS%E5%B1%AC%E6%80%A7%E4%B9%8Bbox-sizing/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="box-sizing屬性"><a href="#box-sizing屬性" class="headerlink" title="box-sizing屬性"></a><code>box-sizing</code>屬性</h2><h3 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">box-sizing: content-box|border-box|inherit;</span><br></pre></td></tr></table></figure><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>content-box</td><td>寬和高分別應用到元素的内容框上。<br />在寬度和高度之外繪製元素的内邊距和邊框。<br />默認值</td></tr><tr><td>border-box</td><td>為元素指定的任何内邊距和邊框，都將在已設定好的寬度和高度内進行繪製。<br />通過從已設定的寬度和高度減去内邊距和邊框才能得到内容的寬和高。</td></tr><tr><td>inherit</td><td>從父元素繼承box-sizing屬性的值</td></tr></tbody></table><p>看圖示更清楚</p><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@fef6c8f9557c6f1eeb2562d0936379b7aa045497/2020/10/17/267cb47e04cc0fecb3997e93cc68bd08.png"></p>]]></content>
      
      
      <categories>
          
          <category> HTML/CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS屬性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中的正則表達式 RegExp類型</title>
      <link href="2020/10/14/JS%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%89%87%E8%A1%A8%E9%81%94%E5%BC%8F-RegExp%E9%A1%9E%E5%9E%8B/"/>
      <url>2020/10/14/JS%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%89%87%E8%A1%A8%E9%81%94%E5%BC%8F-RegExp%E9%A1%9E%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很長一段時間只覺得「正則表達式」這個名字很高大上，但卻不知道是什麽意思，自己也稀里糊塗地一直沒去瞭解。</p><p>直到最近做項目的時候，發現正則表達式的功能很强大，可以從字符串中找到自己需要的部分，但直接看項目代碼看不太懂，主要是不理解寫正則表達式的思路，這才終於著手學習。</p><h2 id="什麽是正則表達式"><a href="#什麽是正則表達式" class="headerlink" title="什麽是正則表達式"></a>什麽是正則表達式</h2><p>正則表達式（Regular Expression）描述的是字符串匹配的模式，有以下多種用途：</p><ul><li>檢查一個字符串是否含有某種子串（返回<code>true</code>或<code>false</code>）</li><li>把匹配到的字符串替換掉</li><li>從某個字符串中取出符合條件的子串（搜索符合自己需求的子串）</li></ul><p>就我自己的理解，正則表達式就是自己描寫一個規則，用於精細地控制（規範）字符串，使之符合我們的需要。</p><h2 id="JS中正則表達式的使用"><a href="#JS中正則表達式的使用" class="headerlink" title="JS中正則表達式的使用"></a>JS中正則表達式的使用</h2><p>ECMAScript通過<code>RegExp</code>類型來支持正則表達式。</p><h3 id="創建方式"><a href="#創建方式" class="headerlink" title="創建方式"></a>創建方式</h3><p>正則表達式的創建方式有兩種：</p><ul><li>字面量形式</li><li>使用<code>RegExp</code>構造函數（創建實例）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字面量形式</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/pattern/</span>flags</span><br><span class="line"><span class="comment">// RegExp構造函數</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(pattern, flags);</span><br><span class="line"></span><br><span class="line">pattern: 模式，即我們制定的字符串規則，可以包含字符類、限定符、分組等</span><br><span class="line">flags: 標志（修飾符）</span><br><span class="line">標志主要包括:</span><br><span class="line"><span class="number">1.</span> g 全局匹配（<span class="built_in">global</span>），模式應用於所有字符串，而非在發現第一個匹配項時就停止</span><br><span class="line"><span class="number">2.</span> i 忽略大小寫（<span class="keyword">case</span>-insensitive）</span><br><span class="line"><span class="number">3.</span> m 多行匹配（multiline），到達一行文本末尾時還會繼續查找下一行中是否存在匹配的項</span><br></pre></td></tr></table></figure><p>例子：匹配”bat”或”cat”，不區分大小寫</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 兩者完全相同，只是創建方式不同。</span></span><br><span class="line"><span class="keyword">let</span> pattern1 = <span class="regexp">/[bc]at/i</span>;</span><br><span class="line"><span class="keyword">let</span> pattern2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;[bc]at&quot;</span>, <span class="string">&quot;i&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>注意，傳給<code>RegExp</code>構造函數的參數都是字符串（不能直接傳字面量），所以在某些情況下要對字符雙重轉義。即在字符串中對轉義字符”\“進行轉義。這是兩種創建方式的主要區別。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg1 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;\d&#x27;</span>);  <span class="comment">///d/</span></span><br><span class="line"><span class="keyword">let</span> reg2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;\\d&#x27;</span>); <span class="comment">///\d/</span></span><br><span class="line"><span class="keyword">let</span> reg3 = <span class="regexp">/\d/</span>;  <span class="comment">//    /\d/</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><p>代表特殊含義的元字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">\d : <span class="number">0</span><span class="number">-9</span>之間的任意一個數字，\d只占一個字符位置  <span class="comment">// digits</span></span><br><span class="line">\w : 數字、字母、下劃綫 <span class="number">0</span><span class="number">-9</span> a-z A-Z _<span class="comment">// words</span></span><br><span class="line">\s : 空白或空格   <span class="comment">// space</span></span><br><span class="line">\D : 除了\d</span><br><span class="line">\W : 除了\w</span><br><span class="line">\S : 除了\s</span><br><span class="line">.  : 除了\n之外的任意字符</span><br><span class="line">\  : 轉義字符</span><br><span class="line">|  : 或者</span><br><span class="line">() : 分組，為模式劃分不同部分</span><br><span class="line">\n : 匹配換行符</span><br><span class="line">\b : 匹配邊界，包括字符串的開頭和結尾、空格的兩邊 =&gt; 不占用字符串位數</span><br><span class="line">^  : 標識開始位置 =&gt; 本身不占字符位置</span><br><span class="line">$  : 標識結束位置 =&gt; 本身不占字符位置</span><br><span class="line">[a-z] : 任意a-z之間的字母</span><br><span class="line">[^a-z] : 任意非a-z的字符，[]中^表示除了</span><br><span class="line">[abc] : abc三個字母中的任何一個</span><br></pre></td></tr></table></figure><p>代表匹配次數的量詞元字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* : <span class="number">0</span>到多個</span><br><span class="line">+ : <span class="number">1</span>到多個</span><br><span class="line">? : <span class="number">0</span>或<span class="number">1</span>次，即可有可無</span><br><span class="line">&#123;n&#125; : 正好n次</span><br><span class="line">&#123;n,&#125; : n到多次</span><br><span class="line">&#123;n,m&#125; : n到m次</span><br></pre></td></tr></table></figure><h3 id="RegExp實例方法"><a href="#RegExp實例方法" class="headerlink" title="RegExp實例方法"></a><code>RegExp</code>實例方法</h3><h4 id="exec-方法"><a href="#exec-方法" class="headerlink" title="exec()方法"></a><code>exec()</code>方法</h4><p>這個方法是<code>RegExp</code>對象的主要方法，是<strong>專門為捕獲分組</strong>而設計的。</p><p><code>exec()</code>方法返回包含第一個匹配項的數組（非全局捕獲時），如果沒有匹配則返回<code>null</code>。</p><p>數組的第一項是與整個模式匹配的字符串，其他項是與模式中的分組相匹配的字符串（若沒有分組，則只包含一個項)。</p><p>返回的數組雖然是<code>Array</code>的實例，但是含有兩個額外的屬性：<code>index</code>和<code>input</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;2017-01-05&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/-(\d+)/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="comment">// [&quot;-01&quot;, &quot;01&quot;, index: 4, input: &quot;2017-01-05&quot;];</span></span><br><span class="line"><span class="string">&quot;-01&quot;</span>: 與整個模式匹配的字符串</span><br><span class="line"><span class="string">&quot;01&quot;</span>: 與模式中的分組匹配的字符串</span><br><span class="line">index: <span class="number">4</span> 表示捕獲是從索引<span class="number">4</span>開始的</span><br><span class="line">input 表示傳入的字符串</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex);</span><br><span class="line"><span class="comment">// lastIndex: 0</span></span><br><span class="line"><span class="comment">// lastIndex是RegExp實例屬性，表示下一次搜索開始的索引位置</span></span><br></pre></td></tr></table></figure><p>當用<code>exec()</code>進行捕獲時，如果沒有加<code>g</code>標志，則每次捕獲的都是同一個目標；而當有<code>g</code>標志時，每次調用則會繼續向後查找新的匹配項。再來看看上面的例子，這次正則加上<code>g</code>標志</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;abc123cba456aaa789&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d+/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex);</span><br><span class="line"><span class="comment">// lastIndex: 0 初始為0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="comment">// [&quot;123&quot;, index: 3, input: &quot;abc123cba456aaa789&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex);</span><br><span class="line"><span class="comment">// lastIndex: 6  記錄下一次捕獲開始的索引位置</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="comment">// [&quot;456&quot;, index: 9, input: &quot;abc123cba456aaa789&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex);</span><br><span class="line"><span class="comment">// lastIndex: 12</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="comment">// [&quot;789&quot;, index: 15, input: &quot;abc123cba456aaa789&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex);</span><br><span class="line"><span class="comment">// lastIndex: 18</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="comment">// null</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex);</span><br><span class="line"><span class="comment">// lastIndex: 0</span></span><br></pre></td></tr></table></figure><p>可見，設置了<code>g</code>標志時，每次調用<code>exec()</code>方法，都會繼續查找下一個匹配項。</p><p>且<code>RegExp</code>實例屬性會記錄下一次開始捕獲的索引位置。初始值為<code>0</code>，當捕獲結果為<code>null</code>時，<code>lastIndex</code>會被修改為<code>0</code>，下次捕獲從頭開始。</p><h4 id="test-方法"><a href="#test-方法" class="headerlink" title="test()方法"></a><code>test()</code>方法</h4><p>檢測字符串是否符合正則，返回<code>true</code>或<code>false</code>。</p><p>當只需要知道是否匹配，但不需要知道文本内容時，這個方法非常方便。因此，<code>test()</code>方法經常用在<code>if</code>語句中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> text = <span class="string">&quot;001-43-2342&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/\d&#123;3&#125;-\d&#123;2&#125;-\d&#123;4&#125;/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pattern.test(text)) &#123;</span><br><span class="line">    alert(<span class="string">&quot;The pattern was matched.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這種方法經常用在驗證用戶輸入的情況下，因爲我們只想知道輸入是否有效，而不在意爲何有效。</p><h3 id="String對象的正則相關方法"><a href="#String對象的正則相關方法" class="headerlink" title="String對象的正則相關方法"></a><code>String</code>對象的正則相關方法</h3><p>除了<code>RegExp</code>對象提供方法外，<code>String</code>對象也提供四個方法來使用正則表達式。</p><h4 id="match-方法"><a href="#match-方法" class="headerlink" title="match()方法"></a><code>match()</code>方法</h4><p>在字符串上調用這個方法，本質上和調用<code>RegExp</code>的<code>exec()</code>方法相同。如果匹配成功，就返回一個數組，不成功則返回<code>null</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;abc123cba456aaa789&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d+/</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="comment">// [&quot;123&quot;, index: 3, input: &quot;abc123cba456aaa789&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br><span class="line"><span class="comment">// [&quot;123&quot;, index: 3, input: &quot;abc123cba456aaa789&quot;]</span></span><br></pre></td></tr></table></figure><p>上面兩個方法返回的結果沒有差別。但是當我們進行全局捕獲時，兩者的不同就會顯現出來。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;abc123cba456aaa789&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d+/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="comment">// [&quot;123&quot;, index: 3, input: &quot;abc123cba456aaa789&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br><span class="line"><span class="comment">// [&quot;123&quot;, &quot;456&quot;, &quot;789&quot;]</span></span><br></pre></td></tr></table></figure><p>當全局捕獲時，<code>match()</code>方法會一次性把所有匹配的字符串都捕獲到數組中，如果想用<code>exec()</code>方法則需要執行多次才能達到同樣的效果。</p><blockquote><p>可以用<code>exec()</code>方法來簡單模擬<code>match()</code>方法的實現</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.myMatch = <span class="function"><span class="keyword">function</span>(<span class="params">reg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> arr = [];</span><br><span class="line">    <span class="keyword">let</span> res = reg.exec(<span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (reg.global) &#123;</span><br><span class="line">        <span class="keyword">while</span>(res) &#123;</span><br><span class="line">            arr.push(res[<span class="number">0</span>]);</span><br><span class="line">            res = reg.exec(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        arr.push(res[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;abc123cba456aaa789&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d+/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.myMatch(reg));</span><br><span class="line"><span class="comment">// [&quot;123&quot;]</span></span><br><span class="line"></span><br><span class="line">reg = <span class="regexp">/\d+/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.myMatch(reg));</span><br><span class="line"><span class="comment">// [&quot;123&quot;, &quot;456&quot;, &quot;789&quot;]</span></span><br></pre></td></tr></table></figure></blockquote><p><code>match()</code>和<code>exec()</code>方法都可以用來捕獲分組，不過<code>match()</code>只在沒有全局標志<code>g</code>時才顯示分組的内容，如果有標志<code>g</code>，則<code>match()</code>會一次性全部捕獲並放到數組中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 沒有全局標志g</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/(a)(b)(c)/</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br><span class="line"><span class="comment">// [&quot;abc&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, index: 0, input: &quot;abc&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="comment">// [&quot;abc&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, index: 0, input: &quot;abc&quot;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 當有全局標志g</span></span><br><span class="line">reg = <span class="regexp">/(a)(b)(c)/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br><span class="line"><span class="comment">// [&quot;abc&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="comment">// [&quot;abc&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, index: 0, input: &quot;abc&quot;]</span></span><br></pre></td></tr></table></figure><h4 id="search-方法"><a href="#search-方法" class="headerlink" title="search()方法"></a><code>search()</code>方法</h4><p>在字符串内檢索指定的值，如果匹配成功返回第一個匹配成功的字符串片段的開始位置，否則返回<code>-1</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/javascript/i</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;hello JavaScript javascript Javascript&quot;</span>.search(reg));  <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h4 id="replace-方法"><a href="#replace-方法" class="headerlink" title="replace()方法"></a><code>replace()</code>方法</h4><p>替換與正則表達式匹配的子串，並返回替換後的字符串。</p><p>不設置全局標志<code>g</code>時只替換第一個匹配項。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg1 = <span class="regexp">/javascript/i</span>;</span><br><span class="line"><span class="keyword">let</span> reg2 = <span class="regexp">/javascript/ig</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;hello JavaScript javascript Javascript&quot;</span>.replace(reg1, <span class="string">&quot;js&quot;</span>));</span><br><span class="line"><span class="comment">// hello js javascript Javascript</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;hello JavaScript javascript Javascript&quot;</span>.replace(reg2, <span class="string">&quot;js&quot;</span>));</span><br><span class="line"><span class="comment">// hello js js js</span></span><br></pre></td></tr></table></figure><p><code>replace()</code>的第二個參數也可以是一個函數。且如果我們要替換正則找到的字符串，函數需要有一個返回值去替換捕獲到的内容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;2017-01-06&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/-(\d+)/g</span>;</span><br><span class="line">str = str.replace(reg, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// [&quot;-01&quot;, &quot;01&quot;, index: 4, input: &quot;2017-01-06&quot;]</span></span><br><span class="line"><span class="comment">// [&quot;-06&quot;, &quot;06&quot;, index: 7, input: &quot;2017-01-06&quot;]</span></span><br></pre></td></tr></table></figure><p>還可以使用一些特殊的字符序列，將正則表達式匹配到的值插入到結果字符串中。下表列出了ECMAScript提供的這些特殊字符序列。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$&amp; : 匹配整個模式的子字符串。與RegExp.lastMatch的值相同</span><br><span class="line">$&#39; : 匹配的子字符串之前的子字符串。與RegExp.leftContext的值相同</span><br><span class="line">$&#96; : 匹配的子字符串之後的子字符串。與RegExp.rightContext的值相同</span><br><span class="line">$n : 匹配第n個捕獲分組的子字符串，其中n等於0~9。例如，$1是匹配第一個分組的子字符串，$2是匹配第二個分組的子字符串，以此類推。如果沒有定義分組，則用空字符串。</span><br><span class="line">$nn : 匹配第nn個捕獲分組的子字符串，其中nn等於01~99。例如，$01是匹配第一個分組的子字符串，$02是匹配第二個分組的子字符串，以此類推。如果沒有定義分組，則用空字符串。</span><br></pre></td></tr></table></figure><h4 id="split-方法"><a href="#split-方法" class="headerlink" title="split()方法"></a><code>split()</code>方法</h4><p>把字符串分割成字符串數組。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/1[2,3]8/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;hello128Javascript138Javascript178Javascript&quot;</span>.split(reg));</span><br><span class="line"><span class="comment">// [&quot;hello&quot;, &quot;Javascript&quot;, &quot;javascript178Javascript&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="正則的特性"><a href="#正則的特性" class="headerlink" title="正則的特性"></a>正則的特性</h3><ul><li>貪婪性</li></ul><blockquote><p>貪婪性是指，正則在捕獲時，每次或盡可能多的去捕獲符合條件的内容。</p><p>如果我們想盡可能少的捕捉符合條件的字符串的話，可以在量詞元字符後面加”?”。</p><p>惰性限定符列表：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*? : 可以重複任意次，但盡可能少</span><br><span class="line">+? : 可以重複<span class="number">1</span>次或任意多次，但盡可能少，至少<span class="number">1</span>次</span><br><span class="line">?? : 可以重複<span class="number">0</span>次或<span class="number">1</span>次，但盡可能少</span><br><span class="line">&#123;n,m&#125;? : 可以重複n到m次，但盡可能少，至少n次</span><br><span class="line">&#123;n,&#125;? : 可以重複n次以上，但盡可能少，至少n次</span><br></pre></td></tr></table></figure></blockquote><ul><li>懶惰性</li></ul><blockquote><p>懶惰性是指正則在成功捕獲一次後，不管後面還有沒有符合條件的，就不再捕捉了。</p><p>如果想捕獲目標中所有符合的，可以用標志g來標明是全局捕獲。</p></blockquote><p>下面來看一個例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;123aaa456&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\d+/</span>;  <span class="comment">// 只捕獲一次，一次盡可能多的捕獲</span></span><br><span class="line">  <span class="comment">// 懶惰且貪婪，想一次做到最好</span></span><br><span class="line"><span class="keyword">let</span> res = str.match(reg);</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br><span class="line"><span class="comment">// [&quot;123&quot;, index: 0, input: &quot;123aaa456&quot;]</span></span><br><span class="line"></span><br><span class="line">reg = <span class="regexp">/\d+?/g</span>;  <span class="comment">// 全局捕獲，每次盡可能少的捕獲</span></span><br><span class="line"><span class="comment">// 不懶惰也不貪婪，一步一步做到最好</span></span><br><span class="line">res = str.match(reg);</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br><span class="line"><span class="comment">// [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;]</span></span><br></pre></td></tr></table></figure><h2 id="思維導圖"><a href="#思維導圖" class="headerlink" title="思維導圖"></a>思維導圖</h2><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@029cb927187f92b23963f2a5c4b25ebba9f054ea/2020/10/15/6f6a8806e8379b07c2508a42166e24cd.png"></p><h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><p><a href="https://segmentfault.com/a/1190000009324194">JS正则表达式入门，看这篇就够了</a></p><p><a href="https://www.cnblogs.com/chenmeng0818/p/6370819.html">js中的正则表达式入门—陈水水的个人博客</a></p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS基礎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS項目 迷你鋼琴</title>
      <link href="2020/10/13/JS%E9%A0%85%E7%9B%AE-%E8%BF%B7%E4%BD%A0%E9%8B%BC%E7%90%B4/"/>
      <url>2020/10/13/JS%E9%A0%85%E7%9B%AE-%E8%BF%B7%E4%BD%A0%E9%8B%BC%E7%90%B4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="項目介紹"><a href="#項目介紹" class="headerlink" title="項目介紹"></a>項目介紹</h2><p>本項目用HTML，CSS和JS，實現了一個可以在網頁彈奏的簡易版鋼琴。</p><p>可以通過鼠標點擊琴鍵或使用鍵盤操作。</p><p>可以自己彈著玩，也可以輸入曲庫中有的歌名，顯示歌詞和按鍵提示來快速上手歌曲。</p><p>實現的功能：</p><ul><li><input checked="" disabled="" type="checkbox"> 簡易的鋼琴外貌</li><li><input checked="" disabled="" type="checkbox"> 彈奏時樣式變化，有按壓感，且有對應音頻播放</li><li><input checked="" disabled="" type="checkbox"> 可用快捷鍵控制開關的數字提示</li><li><input checked="" disabled="" type="checkbox"> 可以顯示和隱藏的使用説明書</li><li><input checked="" disabled="" type="checkbox"> 顯示曲庫中的歌曲列表</li><li><input checked="" disabled="" type="checkbox"> 彈奏曲庫中的歌，能顯示歌詞，以及提示下一個要彈的鍵</li></ul><p>項目截圖：</p><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@4f8cc84ec409bccf2f9d4fcb7ca0c0bbb1874e3f/2020/10/16/0c4e1f71b136ab6ea019af6f8f2d6841.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@0c3900fb7a656c550611b45c12cd829455f03179/2020/10/16/1a7ddf804855a2f9df7e3aed3b5cfd72.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@28319e804f54fbd3feefb09f0981ae40e2556ec9/2020/10/16/9949dfbee8de7648ab71cf01b093361a.png"></p><h2 id="實作心得和小結"><a href="#實作心得和小結" class="headerlink" title="實作心得和小結"></a>實作心得和小結</h2><h3 id="關於頁面怎麽寫"><a href="#關於頁面怎麽寫" class="headerlink" title="關於頁面怎麽寫"></a>關於頁面怎麽寫</h3><p>使用HTML/CSS，完全可以構建出很多有意思的界面，而且同一種問題有很多不同的解法，而不是只有固定的答案，所以在寫頁面的時候可以大膽一些，先按照自己的思路去實現，當然，事後也可以參照其他人的代碼，對照看看哪裡可以改進。</p><h3 id="使用DOM為頁面添加動態"><a href="#使用DOM為頁面添加動態" class="headerlink" title="使用DOM為頁面添加動態"></a>使用DOM為頁面添加動態</h3><p><strong>常用方法和技巧</strong></p><ul><li>獲取文檔内的元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById()</span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName()  <span class="comment">// 返回對象數組</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName()   <span class="comment">// 返回對象數組</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.querySelector()   <span class="comment">// 只返回匹配到的第一個元素</span></span><br><span class="line"><span class="built_in">document</span>.querySelectorAll()   <span class="comment">// 返回所有匹配的元素</span></span><br></pre></td></tr></table></figure><ul><li>獲取、設置屬性（只能用於元素節點）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DOM中的<span class="number">3</span>種節點</span><br><span class="line"><span class="number">1.</span> 元素節點（element node）</span><br><span class="line"><span class="number">2.</span> 文本節點（text node)</span><br><span class="line"><span class="number">3.</span> 屬性節點（attribute node)</span><br><span class="line"></span><br><span class="line">element.getAttribute(attribute)</span><br><span class="line">element.setAttribute(attribute, value)</span><br></pre></td></tr></table></figure><ul><li>添加移除類（樣式）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">element.classList.add(<span class="string">&quot;className&quot;</span>)</span><br><span class="line">element.classList.remove(<span class="string">&quot;className&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>添加到文檔結構中</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parent.appendChild(child_node)</span><br></pre></td></tr></table></figure><ul><li>添加事件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">element.addEventListener(<span class="string">&quot;event_name&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">element.onEvent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="使用正則表達式匹配字符串"><a href="#使用正則表達式匹配字符串" class="headerlink" title="使用正則表達式匹配字符串"></a>使用正則表達式匹配字符串</h3><p>在從曲庫裡提取歌詞和按鍵提示時，用到了正則表達式。</p><p>由於此前沒有應用過正則，所以特地寫了一篇博客，作爲學習正則的筆記 <a href="https://ptrln216.github.io/2020/10/14/JS%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%89%87%E8%A1%A8%E9%81%94%E5%BC%8F-RegExp%E9%A1%9E%E5%9E%8B/">JS中的正則表達式 RegExp類型</a></p><h3 id="本次學到的CSS屬性"><a href="#本次學到的CSS屬性" class="headerlink" title="本次學到的CSS屬性"></a>本次學到的CSS屬性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">user-select</span>: <span class="selector-tag">none</span>;</span><br><span class="line">可以讓文字無法被選中，在做按鈕的時候用到的</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">transition-duration</span>: <span class="selector-class">.3s</span>;</span><br><span class="line">給<span class="selector-tag">CSS</span>屬性變化添加過渡，使樣式改變不生硬</span><br></pre></td></tr></table></figure><h2 id="遇到的問題"><a href="#遇到的問題" class="headerlink" title="遇到的問題"></a>遇到的問題</h2><h3 id="getElementsByClassName-不能添加事件監聽"><a href="#getElementsByClassName-不能添加事件監聽" class="headerlink" title="getElementsByClassName()不能添加事件監聽"></a><code>getElementsByClassName()</code>不能添加事件監聽</h3><p>這是由於<code>getElementsByClassName()</code>返回的是對象數組，所以在添加事件時要加上索引，才能正確引用元素。</p><p>作爲替代，還可以使用<code>querySelector()</code>方法。</p><blockquote><p> 注：<code>querySelector() </code>方法仅仅返回匹配指定选择器的第一个元素。如果你需要返回所有的元素，请使用 <code>querySelectorAll() </code>方法替代。</p></blockquote><h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><p> <a href="https://juejin.im/post/6879708939190009869#heading-5">国庆八天教你怎么写出一个钢琴🎹 | 掘金技术征文-双节特别篇</a></p><p><a href="https://blog.csdn.net/yijiupingfan0914/article/details/80985881">getElementsByClassName()不能添加事件监听</a></p>]]></content>
      
      
      <categories>
          
          <category> 項目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS項目 HTML/CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中的call, apply, bind方法</title>
      <link href="2020/10/12/JS%E4%B8%AD%E7%9A%84call-apply-bind%E6%96%B9%E6%B3%95/"/>
      <url>2020/10/12/JS%E4%B8%AD%E7%9A%84call-apply-bind%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在JavaScript中函數也是對象，是對象則有方法，每個函數對象都包含兩個非繼承而來的方法：<code>apply()</code>和<code>call()</code>。這兩個方法異常强大，可用於切換函數執行的上下文環境（context），實際上等於<strong>設置函數體内<code>this</code>對象的值</strong>。</p><h2 id="apply-方法"><a href="#apply-方法" class="headerlink" title="apply()方法"></a><code>apply()</code>方法</h2><p><code>apply()</code>方法接收兩個參數：</p><ol><li>在其中運行函數的作用域</li><li>參數數組（可以是<code>Array</code>的實例，也可以是<code>arguments</code>對象）</li></ol><p>看一個例子，<code>apply()</code>方法只接收一個參數時，改變函數的作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    user: <span class="string">&quot;Peter&quot;</span>,</span><br><span class="line">    fn: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> b = obj.fn;</span><br><span class="line">b();          <span class="comment">// undefined</span></span><br><span class="line">b.apply(obj);    <span class="comment">// Peter</span></span><br></pre></td></tr></table></figure><p>再看一個例子，<code>apply()</code>方法接收多個參數，注意第二個參數必須是數組</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    user: <span class="string">&quot;Peter&quot;</span>,</span><br><span class="line">    fn: <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.user);</span><br><span class="line">        <span class="built_in">console</span>.log(num1 + num2)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> b = obj.fn;</span><br><span class="line">b.apply(obj, [<span class="number">1</span>, <span class="number">12</span>]);<span class="comment">// Peter</span></span><br><span class="line"><span class="comment">// 13</span></span><br></pre></td></tr></table></figure><p>或者，也可以這麽寫</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    user: <span class="string">&quot;Peter&quot;</span>,</span><br><span class="line">    fn: <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.user);</span><br><span class="line">        <span class="built_in">console</span>.log(num1 + num2)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> b = obj.fn;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">12</span>]</span><br><span class="line">b.apply(obj, arr);<span class="comment">// Peter</span></span><br><span class="line"><span class="comment">// 13</span></span><br></pre></td></tr></table></figure><h2 id="call-方法"><a href="#call-方法" class="headerlink" title="call()方法"></a><code>call()</code>方法</h2><p><code>call()</code>方法和<code>apply()</code>方法作用相同，唯一的區別是接收參數的方式不同。</p><p>第一個參數是<code>this</code>值沒有變化，其餘參數則是直接傳給函數。</p><p>看下面這個例子，我們改寫剛才在<code>apply()</code>方法中的例子，剛才是把參數數組傳給函數，這次直接把參數按順序傳進去</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    user: <span class="string">&quot;Peter&quot;</span>,</span><br><span class="line">    fn: <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.user);</span><br><span class="line">        <span class="built_in">console</span>.log(num1 + num2)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> b = obj.fn;</span><br><span class="line">b.apply(obj, <span class="number">1</span>, <span class="number">12</span>);<span class="comment">// Peter</span></span><br><span class="line"><span class="comment">// 13</span></span><br></pre></td></tr></table></figure><p>使用<code>apply()</code>方法還是<code>call()</code>方法，完全取決於你采用哪種給函數傳遞參數的方式最方便（在不給函數傳遞參數的情況下，使用哪個方法都無所謂）。</p><p>事實上，傳遞參數並非<code>apply()</code>和<code>call()</code>真正的用武之地；<strong>它們真正强大的地方是能夠擴充函數的作用域，最大的好處是，對象不需要與方法有任何耦合關係。</strong></p><h2 id="bind-方法"><a href="#bind-方法" class="headerlink" title="bind()方法"></a><code>bind()</code>方法</h2><p>ECMAScript5還定義了一個方法：<code>bind()</code>。這個方法會創建一個函數的實例，其<code>this</code>值會被綁定到傳給<code>bind()</code>的參數。</p><p>簡單地說，就是<code>bind()</code>方法會返回一個修改過<code>this</code>值的新函數。</p><p><code>bind()</code>方法也可以有多個參數，而且參數的傳遞很自由，可以執行時添加，也可以綁定時就添加。</p><p>看兩個例子比較清楚，第一個是在執行時添加參數</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    user: <span class="string">&quot;Peter&quot;</span>,</span><br><span class="line">    fn: <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2, num3</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.user);</span><br><span class="line">        <span class="built_in">console</span>.log(num1, num2, num3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = obj.fn;</span><br><span class="line"><span class="keyword">const</span> b = a.bind(obj);</span><br><span class="line">b(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);  <span class="comment">// 1 2 3</span></span><br></pre></td></tr></table></figure><p>也可以綁定時就添加參數</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    user: <span class="string">&quot;Peter&quot;</span>,</span><br><span class="line">    fn: <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2, num3</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.user);</span><br><span class="line">        <span class="built_in">console</span>.log(num1, num2, num3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = obj.fn;</span><br><span class="line"><span class="keyword">const</span> b = a.bind(obj, <span class="number">1</span>);</span><br><span class="line">b(<span class="number">2</span>, <span class="number">3</span>);  <span class="comment">// 1 2 3</span></span><br></pre></td></tr></table></figure><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><ul><li><p><code>apply()</code>和<code>call()</code>都是改變<code>this</code>值，並立即執行函數。</p></li><li><p><code>bind()</code>可以改變<code>this</code>值，且讓對應的函數想調用時再調用，且參數可以執行時添加。</p></li></ul><p>這就是它們的區別，具體使用還是要根據實際情況來選擇ヾ(•ω•`)o</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS基礎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>new操作符做了什麽</title>
      <link href="2020/10/12/new%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%81%9A%E4%BA%86%E4%BB%80%E9%BA%BD/"/>
      <url>2020/10/12/new%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%81%9A%E4%BA%86%E4%BB%80%E9%BA%BD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><p><code>new</code>操作符，可以用來調用構造函數，以創建新的實例。</p><p>構造函數如果不用<code>new</code>調用，則只是普通函數，但如果用<code>new</code>調用，則會經歷以下4個步驟</p><ol><li>創建一個新對象<code>&#123;&#125;</code></li><li>把構造函數的作用域給新對象（<code>this</code>指向新對象）</li><li>執行構造函數中的代碼（為新對象添加屬性和方法）</li><li>返回新對象</li></ol><h2 id="new操作符具體行爲"><a href="#new操作符具體行爲" class="headerlink" title="new操作符具體行爲"></a><code>new</code>操作符具體行爲</h2><p>如果我們有一個構造函數<code>Base()</code>，執行如下代碼創建新實例<code>obj</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> Base();</span><br></pre></td></tr></table></figure><p><code>new</code>操作符在這個過程中，具體做了三件事</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;  <span class="comment">// 創建一個新對象</span></span><br><span class="line">obj.__proto__ = Base.prototype;  <span class="comment">// 新對象以構造函數的prototype屬性，作爲原型</span></span><br><span class="line">Base.call(obj);  <span class="comment">// 將this指向新對象，並執行函數</span></span><br></pre></td></tr></table></figure><h2 id="ES5和ES6中創建實例"><a href="#ES5和ES6中創建實例" class="headerlink" title="ES5和ES6中創建實例"></a>ES5和ES6中創建實例</h2><p>ES5使用<code>new</code>操作符和構造函數來創建實例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5 構造函數</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// let this = &#123;&#125;;  隱式地將this指向新對象</span></span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// return this;  如果沒有手動返回對象，則默認返回this，這一步也是隱式的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child = <span class="keyword">new</span> Parent(<span class="string">&quot;Peter&quot;</span>, <span class="number">21</span>);</span><br><span class="line">child.sayName();  <span class="comment">// Peter</span></span><br></pre></td></tr></table></figure><p>ES6使用<code>new</code>操作符和<code>class</code>類來創建實例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6 class類</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name, age) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    sayName() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child = <span class="keyword">new</span> Parent(<span class="string">&quot;Peter&quot;</span>, <span class="number">21</span>);</span><br><span class="line">child.sayName();  <span class="comment">// Peter</span></span><br></pre></td></tr></table></figure><p>實際上，ES6 <code>class</code>類的實質就是構造函數，只不過是語法糖。</p><p>不過，從上面的例子中，我們只能看到構造函數的屬性是怎麽賦給新對象的，但不能解釋新對象是怎麽繼承構造函數的原型的屬性的。要回答這個問題，我們可以自己試著實現一個<code>new</code>操作符。</p><h2 id="自己實現一個簡單的new方法"><a href="#自己實現一個簡單的new方法" class="headerlink" title="自己實現一個簡單的new方法"></a>自己實現一個簡單的<code>new</code>方法</h2><p>構造函數還是和上面的例子一樣</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line">Parent.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著，我們定義自己的<code>new</code>方法，叫做<code>myNew</code>。</p><p><code>Object.create()</code>方法可以創建一個新對象，且使用傳入的對象來提供新創建的對象的<code>__proto__</code>。</p><blockquote><p>語法</p><p><code>Object.create(proto[, propertiesObject])</code></p><p><code>proto</code> 新對象的原型對象</p><p><code>propertiesObject</code> 可選，需要傳入一個對象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNew</span>(<span class="params">Parent, ...rest</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> child = <span class="built_in">Object</span>.create(Parent.prototype);  <span class="comment">// 以構造函數的原型，作爲原型，創建  一個新對象</span></span><br><span class="line">    Parent.call(child, rest);  <span class="comment">// 將this指向新對象，並把參數傳入</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> child;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定義好了<code>myNew</code>方法，下面創建實例並檢驗其效果如何。</p><p><code>&quot;name&quot;</code>和<code>&quot;age&quot;</code>是構造函數賦予的屬性，因此<code>hasOwnProperty</code>返回<code>true</code>。</p><p><code>&quot;sayName&quot;</code>是構造函數的原型上的屬性，因此<code>hasOwnproperty</code>返回<code>false</code></p><p>可見效果與<code>new</code>操作符相同。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 創建實例</span></span><br><span class="line"><span class="keyword">const</span> child = myNew(Parent, &#123;<span class="string">&quot;Peter&quot;</span>, <span class="number">21</span>&#125;);</span><br><span class="line">child.sayName();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 檢驗是否與new操作符的效果相同</span></span><br><span class="line">child <span class="keyword">instanceof</span> Parent;  <span class="comment">// </span></span><br><span class="line">child.hasOwnProperty(<span class="string">&quot;name&quot;</span>);  <span class="comment">// true</span></span><br><span class="line">child.hasOwnProperty(<span class="string">&quot;age&quot;</span>);   <span class="comment">// true</span></span><br><span class="line">child.hasOwnProperty(<span class="string">&quot;sayName&quot;</span>);  <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>至此，大致弄明白了<code>new</code>操作符的具體行爲。</p><h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><p><a href="https://blog.csdn.net/qq_27674439/article/details/99095336">完全搞懂js 中的new()到底做了什么?</a></p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS基礎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this的指向</title>
      <link href="2020/10/12/this%E7%9A%84%E6%8C%87%E5%90%91/"/>
      <url>2020/10/12/this%E7%9A%84%E6%8C%87%E5%90%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在JS函數内部，有兩個特殊的對象：<code>arguments</code>和<code>this</code>。</p><p><code>arguments</code>是一個類數組對象，包含著傳入的所有參數，其主要用途就是保存函數參數。</p><p><code>this</code>引用的是函數據以執行的環境對象/上下文環境（context），其行爲和Java、C#中的<code>this</code>大致相似。</p><p>但是，在Java等面向對象的語言中，<code>this</code>關鍵字的含義是明確而具體的，即指代當前對象，一般在編譯器綁定。而在JS中，<code>this</code>是動態綁定的，在運行期才綁定。因爲如此，JS中<code>this</code>的指向很容易使初學者感到疑惑，本篇文章的目的就是希望能解除關於<code>this</code>指向問題疑惑。</p><p>簡單地說，<strong>關於<code>this</code>的指向在函數定義時是確定不了的，只有在函數執行時才能確定<code>this</code>到底指向誰，而且實際上<code>this</code>最終指向的是那個調用它的對象。</strong></p><p>上面這句是精簡的結論，大部分時候這樣理解沒問題，但其實是不準確的，後面會舉例説明，來對<code>this</code>的指向有一個全面的理解。</p><h3 id="函數中使用this"><a href="#函數中使用this" class="headerlink" title="函數中使用this"></a>函數中使用<code>this</code></h3><p>當函數被直接調用時，此時<code>this</code>綁定到全局對象。在瀏覽器中，全局對象就是<code>window</code>對象。</p><p>所以在如下例子中，<code>window</code>對象沒有<code>user</code>屬性，打印出來就是<code>undefined</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="string">&quot;Peter&quot;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.user);  <span class="comment">// undefined, window沒有user屬性</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// window</span></span><br><span class="line">&#125;</span><br><span class="line">fn();  <span class="comment">// 在全局作用域中直接調用</span></span><br></pre></td></tr></table></figure><p>在全局作用域直接調用函數等價於<code>window.fn();</code></p><blockquote><p>注：在嚴格模式下，<code>this</code>指向的不是<code>window</code>，而是<code>undefined</code></p></blockquote><h3 id="對象方法中使用this"><a href="#對象方法中使用this" class="headerlink" title="對象方法中使用this"></a>對象方法中使用<code>this</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    user: <span class="string">&quot;Peter&quot;</span>,</span><br><span class="line">    fn: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.fn();  <span class="comment">// Peter</span></span><br></pre></td></tr></table></figure><p>根據我們的精簡結論，誰調用方法<code>this</code>就指向誰，在上述例子中，是<code>fn()</code>是通過<code>obj.fn()</code>執行的，所以<code>this</code>指向<code>obj</code>。</p><p>以上兩個例子過於簡單，其實説的都不準確，看下面幾個例子，才能徹底搞懂<code>this</code>的指向。</p><h3 id="進一步討論this的例子"><a href="#進一步討論this的例子" class="headerlink" title="進一步討論this的例子"></a>進一步討論<code>this</code>的例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    user: <span class="string">&quot;Peter&quot;</span>,</span><br><span class="line">    fn: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.obj.fn();  <span class="comment">// Peter</span></span><br></pre></td></tr></table></figure><p>看上面這個例子，如果按照精簡結論「誰調用的就指向誰」，那麽<code>this</code>應該指向<code>window</code>，但實際上<code>this</code>指向的是<code>obj</code>。</p><p>我們先不解釋，再來看下面這個例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    user: <span class="string">&quot;Peter&quot;</span>,</span><br><span class="line">    o: &#123;</span><br><span class="line">        user: <span class="string">&quot;Michelle&quot;</span></span><br><span class="line">        fn: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.user);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.o.fn();  <span class="comment">// Michelle</span></span><br></pre></td></tr></table></figure><p>可以看到，方法由<code>obj</code>調用，但是<code>this</code>指向的仍然是<code>o</code>。</p><p>這樣看來，精簡結論好像是錯的(○´･д･)ﾉ，不過我們進行一些補充，就可以在精簡結論的基礎上，對<code>this</code>的指向有全面的認識。</p><h4 id="補充如下"><a href="#補充如下" class="headerlink" title="補充如下"></a>補充如下</h4><p><strong>① 當函數被直接調用，<code>this</code>指向<code>window</code></strong></p><p><strong>② 當函數被一個對象調用，<code>this</code>指向這個對象</strong></p><p><strong>③ 當函數被多級對象調用，<code>this</code>指向的是上一級的對象</strong></p><p>還有一种比較特殊的情況，看下面這個例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    user: <span class="string">&quot;Peter&quot;</span>,</span><br><span class="line">    o: &#123;</span><br><span class="line">        user: <span class="string">&quot;Michelle&quot;</span></span><br><span class="line">        fn: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.user);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> func = obj.o.fn; </span><br><span class="line">func();  <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>這裡<code>this</code>指向的是<code>window</code>，我們要看的是函數最後執行的時候是誰調用的，由於<code>obj.o.fn</code>被賦值給<code>func</code>時還沒有執行，所以當<code>func()</code>執行時，執行的對象是<code>window</code>。</p><h3 id="構造函數中使用this"><a href="#構造函數中使用this" class="headerlink" title="構造函數中使用this"></a>構造函數中使用<code>this</code></h3><p>JS支持面向對象式編程，但與主流的面向對象式編程語言不同，JS並沒有類（class）的概念，而是使用基於原型（prototype）的繼承方式。</p><p>相應的，JS中的構造函數也很特殊，如果不使用<code>new</code>調用，則和普通函數一樣。</p><p>作爲約定俗成的規定，構造函數以大寫字母開頭，可以提醒調用者用正確的方式調用。如果調用正確，<code>this</code>綁定到新創建的對象上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.user = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> Fn(<span class="string">&quot;Peter&quot;</span>);  <span class="comment">// this指向新創建的對象，所以a才有user屬性</span></span><br><span class="line"><span class="built_in">console</span>.log(a.user);  <span class="comment">// Peter</span></span><br></pre></td></tr></table></figure><p>從上面的例子中可以看到，用<code>Fn()</code>創建實例的時候，構造函數中使用的<code>this</code>指向的是新創建的對象<code>a</code>。</p><p>想具體知道<code>new</code>操作符做了什麽的，可以看這篇文章 <a href="https://ptrln216.github.io/2020/10/12/new%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%81%9A%E4%BA%86%E4%BB%80%E9%BA%BD/">new操作符做了什麽</a></p><h4 id="當構造函數中有return時，this的指向"><a href="#當構造函數中有return時，this的指向" class="headerlink" title="當構造函數中有return時，this的指向"></a>當構造函數中有<code>return</code>時，<code>this</code>的指向</h4><p>首先，一個函數，要作爲一個真正意義上的構造函數，需滿足以下條件：</p><ol><li>在函數内部對新對象（<code>this</code>）的屬性進行設置，通常是添加屬性和方法。</li><li>構造函數可以包含返回（<code>return</code>）語句（不推薦），但返回值必須是<code>this</code>，或其他非引用類型的值。</li></ol><p><strong>在JS構造函數中的<code>return</code>，如果返回了基本類型（<code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code>）的值，那麽對構造函數沒有影響；如果返回了引用類型的值（<code>Object</code>、<code>Array</code>、<code>Function</code>），那麽我們<code>new</code>出來的對象會被返回的引用類型值給替換。</strong></p><p>下面舉幾個例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 構造函數返回空對象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.user = <span class="string">&quot;Peter&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> Fn();</span><br><span class="line"><span class="built_in">console</span>.log(a.user);  <span class="comment">// undefined, a為空對象&#123;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 構造函數返回Funtion類型的值，為引用類型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.user = <span class="string">&quot;Peter&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> Fn();</span><br><span class="line"><span class="built_in">console</span>.log(a.user);  <span class="comment">// undefined, a為f ()&#123;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 構造函數返回基本類型的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.user = <span class="string">&quot;Peter&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> Fn();</span><br><span class="line"><span class="built_in">console</span>.log(a.user);  <span class="comment">// Peter, 沒有影響</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 構造函數返回基本類型的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.user = <span class="string">&quot;Peter&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> Fn();</span><br><span class="line"><span class="built_in">console</span>.log(a.user);  <span class="comment">// Peter, 沒有影響</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 構造函數返回基本類型的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.user = <span class="string">&quot;Peter&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> Fn();</span><br><span class="line"><span class="built_in">console</span>.log(a.user);  <span class="comment">// Peter, 沒有影響</span></span><br></pre></td></tr></table></figure><h3 id="自行指定this的指向"><a href="#自行指定this的指向" class="headerlink" title="自行指定this的指向"></a>自行指定<code>this</code>的指向</h3><p>除了上面這些情況以外，我們還可以自己綁定<code>this</code>的指向，利用<code>apply</code>、<code>call</code>、<code>bind</code>方法。</p><p>詳細請看這篇文章 <a href="https://ptrln216.github.io/2020/10/12/JS%E4%B8%AD%E7%9A%84call-apply-bind%E6%96%B9%E6%B3%95/">JS中的call, apply, bind方法</a></p><h3 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h3><ul><li><p><a href="https://www.cnblogs.com/pssp/p/5216085.html">彻底理解js中this的指向，不必硬背</a></p></li><li><p><a href="https://www.ibm.com/developerworks/cn/web/1207_wangqf_jsthis/index.html">深入浅出 JavaScript 中的 this</a></p></li><li><p><a href="https://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/">Understanding JavaScript Function Invocation and “this”</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS基礎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS佈局之浮動和清除浮動</title>
      <link href="2020/10/10/CSS%E4%BD%88%E5%B1%80%E4%B9%8B%E6%B5%AE%E5%8B%95%E5%92%8C%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8B%95/"/>
      <url>2020/10/10/CSS%E4%BD%88%E5%B1%80%E4%B9%8B%E6%B5%AE%E5%8B%95%E5%92%8C%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8B%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="CSS浮動"><a href="#CSS浮動" class="headerlink" title="CSS浮動"></a>CSS浮動</h2><h3 id="float屬性"><a href="#float屬性" class="headerlink" title="float屬性"></a>float屬性</h3><p>在CSS中，任何元素都可以浮動，且任何設置了浮動（float）屬性的元素都會變成塊級元素。因此，浮動（float）經常用於佈局。</p><p>浮動有以下特點：</p><ul><li>浮動的框可以向左或向右移動，直到外邊緣碰到包含框或另一個浮動框的邊框。</li><li><strong>浮動可以理解為讓某個元素脫離標準流，漂浮在標準流之上，和標準流不是一个層次</strong></li></ul><p>浮動（float）屬性有三種取值：</p><ul><li>left：向左浮動</li><li>right：向右浮動</li><li>none：不浮動，默認值</li></ul><p><em>注：<a href="https://www.cnblogs.com/iyangyuan/archive/2013/03/27/2983813.html">CSS浮動通俗講解</a> 這篇講得很通俗易懂，有助於理解</em></p><h3 id="會帶來什麽問題"><a href="#會帶來什麽問題" class="headerlink" title="會帶來什麽問題"></a>會帶來什麽問題</h3><p>用一個例子來演示，用一個div包裹住圖片，圖片長寬皆設爲250px。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">&quot;250&quot;</span> <span class="attr">height</span>=<span class="string">&quot;250&quot;</span> <span class="attr">src</span>=<span class="string">&quot;link_to_the_picture&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>現在沒事，div能夠包裹住其内部的元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然後簡單設置樣式，img先不設置float屬性，看下效果。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="comment">/*寬度設窄，方便截圖</span></span><br><span class="line"><span class="comment">    width: 30%;</span></span><br><span class="line"><span class="comment">    /*設置邊框看得更清楚*/</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="comment">/*位置居中*/</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@46690a4a46cfa065a69d8b265d012e314f921929/2020/10/10/47c693ebfe61afa5fb88d13b00b67cbc.png"></p><p>可以看到div的黑邊框包裹住了圖片，接著設置float屬性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@52356ace4db2287b01dfa6bb849491c2fc9a8edd/2020/10/10/0c0f4de1f372edde72cf194c3ec6a8d3.png"></p><p>可以看到，div不再包裹img了，float屬性破壞了我們的佈局。</p><p>好在，我們有幾種方法可以用來解決這個問題。</p><h2 id="清除浮動的8種方法"><a href="#清除浮動的8種方法" class="headerlink" title="清除浮動的8種方法"></a>清除浮動的8種方法</h2><h3 id="1-父級div設置height"><a href="#1-父級div設置height" class="headerlink" title="1. 父級div設置height"></a>1. 父級div設置height</h3><p>原理：父級div手動設置height，就可以解決父級div無法自動獲取高度的問題。</p><p>優點：簡單、代碼少</p><p>缺點：只適合固定高度的佈局，要給出精確的高度</p><p>建議：不推薦使用，高度固定的佈局可以使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">CSS</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*清除浮動*/</span></span><br><span class="line">    height: 300px;  // 因爲已知圖片高為250px</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@328a874089717fac655fb9657b027934f5983c28/2020/10/10/4b9d3da5893a16f1b2a1beefefd5f635.png"></p><h3 id="2-浮動元素後加上空div標簽，並加上clear-both樣式"><a href="#2-浮動元素後加上空div標簽，並加上clear-both樣式" class="headerlink" title="2. 浮動元素後加上空div標簽，並加上clear: both樣式"></a>2. 浮動元素後加上空div標簽，並加上clear: both樣式</h3><p>原理：添加一個空div，並利用CSS提供的clear: both清除浮動，這樣一來這個空div會因爲兩邊不能有浮動元素，而被放到浮動元素的下方（和最下邊緣對齊），而容器元素就能自動獲取正確的高度了</p><p>優點：簡單、代碼少、瀏覽器支持好</p><p>缺點：浮動佈局多的話，要添加很多無語義的html元素，代碼不夠優雅，後期不易維護</p><p>建議：不推薦使用，但此方法是以前主要使用的一種    </p><pre><code>HTML&lt;div&gt;    &lt;img width=&quot;250&quot; height=&quot;250&quot; src=&quot;link_to_the_picture&quot;&gt;    &lt;p&gt;利用空div設置clear: both，自動獲取高度&lt;/p&gt;    &lt;!-- 清除浮動 --&gt;    &lt;div class=&quot;clearFloat&quot;&gt;&lt;/div&gt;&lt;/div&gt;</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">CSS</span></span><br><span class="line"><span class="comment">/*清除浮動*/</span></span><br><span class="line"><span class="selector-class">.clearFloat</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>圖中故意畫出空div的border，可以清楚的看到空div被擠壓到浮動元素下方。容器元素由此自動獲得高度。</p><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@b5f93880eab8b11f766c14c3918f067d3fc4e4b4/2020/10/10/67ece70c7dcc5367f8ea8ad0d235664c.png"></p><h3 id="3-父級div定義僞類-after和zoom"><a href="#3-父級div定義僞類-after和zoom" class="headerlink" title="3. 父級div定義僞類::after和zoom"></a>3. 父級div定義僞類::after和zoom</h3><p>原理：原理和方法2類似，zoom是IE專有屬性，用來解決IE的浮動問題</p><p>優點：瀏覽器支持性好，目前大型網站都有使用</p><p>缺點：代碼多，且要兩句代碼結合使用才能讓主流瀏覽器都支持</p><p>建議：推薦使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTML</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clearFloat&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">&quot;250&quot;</span> <span class="attr">height</span>=<span class="string">&quot;250&quot;</span> <span class="attr">src</span>=<span class="string">&quot;link_to_the_picture&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>父類定義僞類:after和zoom<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">CSS</span></span><br><span class="line"><span class="selector-class">.clearFloat</span> &#123;</span><br><span class="line">    <span class="attribute">zoom</span>: <span class="number">1</span>;  <span class="comment">/*IE專用*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearFloat</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ptrln216/HexoStaticFile@6955888672662574dabf6b4729616c8d002acdc5/2020/10/10/b609548305832ee4e8f7f81524194ec1.png"></p><h3 id="4-父級div定義overflow-hidden"><a href="#4-父級div定義overflow-hidden" class="headerlink" title="4. 父級div定義overflow: hidden"></a>4. 父級div定義overflow: hidden</h3><p>原理：必須定義width（或zoom: 1），同時不能定義height，瀏覽器會自動檢查浮動區域的高度</p><p>優點：簡單、代碼少、瀏覽器支持好</p><p>缺點：不能和position配合使用，因爲超出尺寸的會被隱藏</p><p>建議：只推薦沒有使用position，或對overflow: hidden理解比較深的朋友使用</p><h3 id="5-父級div定義overflow-auto"><a href="#5-父級div定義overflow-auto" class="headerlink" title="5. 父級div定義overflow: auto"></a>5. 父級div定義overflow: auto</h3><p>原理：和方法4類似</p><p>優點：簡單、代碼少、瀏覽器支持好</p><p>缺點：内部寬高超過父級div時，會出現滾動條</p><p>建議：不推薦使用，除非你需要滾動條，或確定不會出現滾動條</p><hr><p><strong>以下3種方法只作瞭解，不推薦使用</strong></p><h3 id="6-父級div也一起浮動"><a href="#6-父級div也一起浮動" class="headerlink" title="6. 父級div也一起浮動"></a>6. 父級div也一起浮動</h3><p>原理：所有代碼一起浮動就變成一個整體</p><p>缺點：會產生新的浮動問題</p><h3 id="7-父級div定義display-table"><a href="#7-父級div定義display-table" class="headerlink" title="7. 父級div定義display: table"></a>7. 父級div定義display: table</h3><p>原理：將div變成表格屬性</p><p>缺點：會產生新的未知問題</p><h3 id="8-結尾處加br-hr標簽，並添加clear-both"><a href="#8-結尾處加br-hr標簽，並添加clear-both" class="headerlink" title="8. 結尾處加br/hr標簽，並添加clear: both"></a>8. 結尾處加br/hr標簽，並添加clear: both</h3><p>原理：父級div要記得定義zoom: 1，來解決IE的浮動問題</p>]]></content>
      
      
      <categories>
          
          <category> HTML/CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS佈局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/09/29/hello-world/"/>
      <url>2020/09/29/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h2><p> 看到很多文章和大佬，都推薦養成寫博客的習慣，所以就試著搭一個屬於自己的博客網站，一方面記錄前端的學習過程，就當作是寫學習筆記；另一方面也給自己一個鍛煉文筆的機會，畢竟提高文筆是2020年初給自己設的三大目標之一。</p><p>在網上查了一圈，加上之前忘記從哪聼到過Hexo，最終用了Hexo這個網誌框架。不得不説，用起來十分簡便，而且效果令人滿意，官網上有好多好看的主題可以白嫖(●’◡’●)，後面也會介紹怎麽應用不同的主題。</p><p>這篇文章作爲第一篇post，簡單記錄下是怎麽從0到1，搭建出現在這個網站的。</p><h2 id="前期準備"><a href="#前期準備" class="headerlink" title="前期準備"></a>前期準備</h2><p>在安裝Hexo前，需先安裝<a href="https://nodejs.org/en/">Node.js</a>和<a href="https://git-scm.com/">Git</a>。</p><p>都安裝好後，用npm就可以完成Hexo的安裝。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="快速開始"><a href="#快速開始" class="headerlink" title="快速開始"></a>快速開始</h2><p>訪問<a href="https://hexo.io/">Hexo</a>官網，跟著文檔即可快速開始。這裡記錄一些<strong>常用的指令和步驟</strong>。</p><h3 id="建立專案"><a href="#建立專案" class="headerlink" title="建立專案"></a>建立專案</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;  // &lt;folder&gt;即爲專案名，如果省略則在當前目錄下生成專案</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install  // 安裝依賴</span><br></pre></td></tr></table></figure><p>建立完成後，專案資料夾下會有如下結構</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml   // 大部分配置都在此完成</span><br><span class="line">├── package.json  // 記錄了專案有哪些依賴</span><br><span class="line">├── scaffolds     // 鷹架，建立新文章時，Hexo會根據scaffolds來建立檔案</span><br><span class="line">├── <span class="built_in">source</span>        // 放置内容的地方</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes        // 主題放置在這</span><br></pre></td></tr></table></figure><h3 id="寫作"><a href="#寫作" class="headerlink" title="寫作"></a>寫作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span>    // 默認是post</span><br><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>佈局</th><th>路徑</th></tr></thead><tbody><tr><td>post</td><td>source/_posts</td></tr><tr><td>page</td><td>source</td></tr><tr><td>draft（草稿）</td><td>source/_drafts</td></tr></tbody></table><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="啓動服務器"><a href="#啓動服務器" class="headerlink" title="啓動服務器"></a>啓動服務器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>預設是<code>http://localhost:4000/</code>。</p><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="產生靜態檔案"><a href="#產生靜態檔案" class="headerlink" title="產生靜態檔案"></a>產生靜態檔案</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><table><thead><tr><th>選項</th><th>描述</th></tr></thead><tbody><tr><td>-d, –deploy</td><td>產生完即部署網站</td></tr><tr><td>-w, –watch</td><td>監看檔案變更</td></tr></tbody></table><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="清除"><a href="#清除" class="headerlink" title="清除"></a>清除</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p>清除快取檔案 (<code>db.json</code>) 和已產生的靜態檔案 (<code>public</code>)</p><h3 id="部署網站"><a href="#部署網站" class="headerlink" title="部署網站"></a>部署網站</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>一般先清除，再部署。</p><p>部署到哪可以在配置文件裡設定，我部署到<a href="https://github.com/">Github</a>上，而且倉庫名叫做<code>&lt;username&gt;.github.io</code>，這樣部署完成後，可以直接用Github Page的服務，免費獲得一個自己的在線網站。</p><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="美化網站"><a href="#美化網站" class="headerlink" title="美化網站"></a>美化網站</h2><p>Hexo有很多好看的主題可以套用，可以逛逛官網的主題區，説不定會找到符合自己需求的主題，省下很多功夫。</p><p>我選擇了<a href="https://demo.jerryc.me/">Butterfly</a>，安裝教程照著文檔走即可，不是很複雜，先安裝再配置就行了。</p><h3 id="圖床"><a href="#圖床" class="headerlink" title="圖床"></a>圖床</h3><p>如果喜歡為文章設定封面的話，爲了加快加載速度、減少本地圖片，建議使用圖床來存儲圖片。</p><p>我使用的是<a href="https://github.com/Molunerfinn/PicGo">PicGo</a>作爲上傳軟體，上傳到GitHub作爲圖床（jsdelivr加速）。</p><p>具體怎麽配置可以參考這篇 <a href="https://www.antmoe.com/posts/c9c6437b/index.html">配置picgo成为多平台图床工具</a></p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>不得不説，套用主題可以快速的有點樣子，不過要好看還是得下一番功夫。</p><p>這裡附上一個大佬的博客，寫得很好，想要進一步美化的十分推薦去看看。</p><p><a href="https://www.antmoe.com/index.html">小康博客</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
